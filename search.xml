<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>GO的协程</title>
    <url>/GO%E7%9A%84%E5%8D%8F%E7%A8%8B.html</url>
    <content><![CDATA[<a id="more"></a>



<h3 id="数据类型概念"><a href="#数据类型概念" class="headerlink" title="数据类型概念"></a>数据类型概念</h3><ul>
<li><code>值类型</code>和<code>引用类型</code></li>
</ul>
<blockquote>
<p>两者的主要区别：拷贝操作和函数传参。<br>值类型的变量存储的是一个内存地址，引用类型的变量实际上是一个内存指针</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值类型：int、float、bool和string这些类型都属于值类型,</span></span><br><span class="line"><span class="comment">// 使用这些类型的变量直接指向存在内存中的值，，值类型的变量的值存储在栈中。当使用等号=将一个变量的值赋给另一个变量时，如 j = i ,实际上是在内存中将 i 的值进行了拷贝。可以通过 &amp;i 获取变量 i 的内存地址。  值拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型：特指slice、map、channel这三种预定义类型</span></span><br><span class="line"><span class="comment">// 引用类型拥有更复杂的存储结构:(1)分配内存 (2)初始化一系列属性等一个引用类型的变量r1存储的是r1的值所在的内存地址（数字），或内存地址中第一个字所在的位置，这个内存地址被称之为指针，这个指针实际上也被存在另外的某一个字中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义了一个数组a，它是值类型，复制给b是copy，当b发生变化后a并不会发生任何变化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    b := a</span><br><span class="line">    b[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1 2 3 4 5] [1 2 100 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用切片再试一下  (结果是一样的，因为切片a存的不是一个地址，而是一个指针，那么 a 和 b的指针一样了，通过b进行变量的操作，那么实际上影响的还是那个内存地址)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 大家看到下面是不是迷惑了</span></span><br><span class="line">    <span class="comment">// 为什么这个和上面的写法看着都一样呀</span></span><br><span class="line">    <span class="comment">// 这就涉及到切片操作了</span></span><br><span class="line">    <span class="comment">// 通过字面量创建切片，这种方法和创建数组类似，只是不需要指定[]运算符里的值。初始的长度和容量会基于初始化时提供的元素的个数确定</span></span><br><span class="line">    a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    b := a</span><br><span class="line">    b[<span class="number">2</span>] = <span class="number">8</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1 2 8 4 5] [1 2 8 4 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-数组-arrays"><a href="#2-数组-arrays" class="headerlink" title="2. 数组 arrays"></a>2. 数组 arrays</h3><ul>
<li>首先声明一个数组对象</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为没有设置一个值，所以默认为0 ， 下面是 声明一个数组变量a， 元素的数据类型是 int， 一共有五个元素</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure>

<ul>
<li>赋值数组内的元素</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个int数组，大小为5个, 每个元素默认为0 </span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过索引index的方式设置数组对象中元素的值 </span></span><br><span class="line"><span class="comment">// 语法 variableName[index] = value</span></span><br><span class="line"><span class="comment">// 需要注意的一点，就是数据类型，要和初始化时制定的数据类型一样才可以</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">200</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"set: "</span>, a)</span><br><span class="line"><span class="comment">// result  set: [0 0 0 100 200]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>动态声明数组</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 我们大概有以下集中声明数组的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 已知数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方法，只是初始化，但是不带初始化值，也就是里面每个元素都为0</span></span><br><span class="line">vat array [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 即能初始化变量，又带了初始化值</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以不用写具体的长度，使用`...`代替</span></span><br><span class="line"><span class="keyword">var</span> array = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">array := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 当数组的长度是一个动态的值n的是时候，用上述的方法去初始化数组肯定会报错的，那这时候，我们应该去使用 `make` 函数</span></span><br><span class="line"></span><br><span class="line">array := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br></pre></td></tr></table></figure>

<h3 id="3-切片-slice"><a href="#3-切片-slice" class="headerlink" title="3. 切片 slice"></a>3. 切片 slice</h3><blockquote>
<p>一个切片有三部分组成，地址指针、 长度、 容量</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 长度是什么？</span></span><br><span class="line"><span class="comment">// 答： 是指可以访问的元素的个数</span></span><br><span class="line"><span class="comment">// eg： [1 2 3 4] 这个切片打印出来是这样的,那么这个切片的长度为4， 可以使用len函数去获取到这个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 容量是什么？</span></span><br><span class="line"><span class="comment">// 首先普及一个概念，容量不是指这个切片当前的长度，而是指这个切片可以增长到的长度</span></span><br><span class="line"><span class="comment">// 你可以这样理解，都玩过MySQL吧，建表的时候，字符串类型一般用varchar和char</span></span><br><span class="line"><span class="comment">// 那这两个字段类型有什么区别呢？ </span></span><br><span class="line"><span class="comment">// 你百度以下就知道了，我写下去，，又是一大堆字，懒得写，你就可以大致理解为，切片就类似于 varchar， 声明了一个200长度的字符串类型，唉，我就不放满，就放10个，就是玩，我也可以。 但是char就不行了，10个长度，你不放10个，，肯定报错！</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过 make() 函数创建切片</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个切片，长度和容量都为10个元素</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个切片，制定长度为5， 容量为10</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>通过字面量创建切片</li>
</ul>
<blockquote>
<p>另一种常用的创建切片的方法是使用切片字面量，这种方法和创建数组类似，只是不需要指定[]运算符里的值。初始的长度和容量会基于初始化时提供的元素的个数确定：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度和容量都为3的字符串切片</span></span><br><span class="line">myStr := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个整型切片，长度和容量都为5</span></span><br><span class="line">myInt := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 长度为2 ， 容量为5 的整型切片</span></span><br><span class="line">myInt2 := myInt[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Print(<span class="string">"myInt2 len &amp; cap "</span>, <span class="built_in">len</span>(myInt2), <span class="built_in">cap</span>(myInt2))</span><br><span class="line"><span class="comment">// myInt2 len &amp; cap 2 5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>nil 和空切片<blockquote>
<p>程序可能需要声明一个值为 nil 的切片（也称nil切片）。只要在声明时不做任何初始化，就会创建一个 nil 切片</p>
</blockquote>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建nil 整型切片</span></span><br><span class="line"><span class="keyword">var</span> myNum []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空的 整型切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字面量写法</span></span><br><span class="line">myNum := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用make 写法</span></span><br><span class="line">myNum := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-map"><a href="#4-map" class="headerlink" title="4. map"></a>4. map</h3><ul>
<li>声明map类型的变量<blockquote>
<p>语法： make(map[key-type]value-type)</p>
</blockquote>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用make 进行map数据类型变量的初始化 （引用类型变量需要初始化内存分配地址）</span></span><br><span class="line"></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[String]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"m"</span>, m)</span><br><span class="line"><span class="comment">// map [ ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进行map变量的内容赋值<blockquote>
<p>语法：经典的name[key] = value </p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>GO</category>
      </categories>
      <tags>
        <tag>c l z</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言heap剖析</title>
    <url>/GO%E8%AF%AD%E8%A8%80heap%E5%89%96%E6%9E%90.html</url>
    <content><![CDATA[<a id="more"></a>


<h2 id="heap使用"><a href="#heap使用" class="headerlink" title="heap使用"></a>heap使用</h2><p>在go语言的标准库container中，实现了三中数据类型：heap,list,ring，list在前面一篇文章中已经写了，现在要写的是heap（堆）的源码剖析。</p>
<p>首先，学会怎么使用heap，第一步当然是导入包了，代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"container/heap"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>这个堆使用的数据结构是最小二叉树，即根节点比左边子树和右边子树的所有值都小。源码里面只是实现了一个接口，它的定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">	sort.Interface</span><br><span class="line">	Push(x <span class="keyword">interface</span>&#123;&#125;) <span class="comment">// add x as element Len()</span></span><br><span class="line">	Pop() <span class="keyword">interface</span>&#123;&#125;   <span class="comment">// remove and return element Len() - 1.</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>从这个接口可以看出，其继承了sort.Interface接口，那么sort.Interface的定义是什么呢？源码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Interface <span class="keyword">interface</span> &#123;</span><br><span class="line">	<span class="comment">// Len is the number of elements in the collection.</span></span><br><span class="line">	Len() <span class="keyword">int</span></span><br><span class="line">	<span class="comment">// Less reports whether the element with</span></span><br><span class="line">	<span class="comment">// index i should sort before the element with index j.</span></span><br><span class="line">	Less(i, j <span class="keyword">int</span>) <span class="keyword">bool</span></span><br><span class="line">	<span class="comment">// Swap swaps the elements with indexes i and j.</span></span><br><span class="line">	Swap(i, j <span class="keyword">int</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>也就是说，我们要使用go标准库给我们提供的heap，那么必须自己实现这些接口定义的方法，需要实现的方法如下：</p>
<ul>
<li>Len() int</li>
<li>Less(i, j int) bool</li>
<li>Swap(i, j int)</li>
<li>Push(x interface{})</li>
<li>Pop() interface{}</li>
</ul>
<p>实现了这五个方法的数据类型才能使用go标准库给我们提供的heap，下面简单示例为定义一个IntHeap类型，并实现上面五个方法。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> IntHeap []<span class="keyword">int</span>  <span class="comment">// 定义一个类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> <span class="built_in">len</span>(h) &#125;  <span class="comment">// 绑定len方法,返回长度</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;  <span class="comment">// 绑定less方法</span></span><br><span class="line">	<span class="keyword">return</span> h[i] &lt; h[j]  <span class="comment">// 如果h[i]&lt;h[j]生成的就是小根堆，如果h[i]&gt;h[j]生成的就是大根堆</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h IntHeap)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;  <span class="comment">// 绑定swap方法，交换两个元素位置</span></span><br><span class="line">	h[i], h[j] = h[j], h[i]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *IntHeap)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;  <span class="comment">// 绑定pop方法，从最后拿出一个元素并返回</span></span><br><span class="line">	old := *h</span><br><span class="line">	n := <span class="built_in">len</span>(old)</span><br><span class="line">	x := old[n<span class="number">-1</span>]</span><br><span class="line">	*h = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line">	<span class="keyword">return</span> x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(h *IntHeap)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;  <span class="comment">// 绑定push方法，插入新元素</span></span><br><span class="line">	*h = <span class="built_in">append</span>(*h, x.(<span class="keyword">int</span>))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>针对IntHeap实现了这五个方法之后，我们就可以使用heap了，下面是具体使用方法：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	h := &amp;IntHeap&#123;<span class="number">2</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">0</span>&#125;  <span class="comment">// 创建slice</span></span><br><span class="line">	heap.Init(h)  <span class="comment">// 初始化heap</span></span><br><span class="line">	fmt.Println(*h)</span><br><span class="line">	fmt.Println(heap.Pop(h))  <span class="comment">// 调用pop</span></span><br><span class="line">	heap.Push(h, <span class="number">6</span>)  <span class="comment">// 调用push</span></span><br><span class="line">	fmt.Println(*h)</span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(*h) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		fmt.Printf(<span class="string">"%d "</span>, heap.Pop(h))</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">输出结果：</span><br><span class="line">[<span class="number">0</span> <span class="number">1</span> <span class="number">3</span> <span class="number">6</span> <span class="number">2</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span> <span class="number">4</span>]</span><br><span class="line"><span class="number">0</span></span><br><span class="line">[<span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">6</span> <span class="number">4</span> <span class="number">5</span> <span class="number">7</span> <span class="number">9</span> <span class="number">8</span> <span class="number">6</span>]</span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">3</span> <span class="number">4</span> <span class="number">5</span> <span class="number">6</span> <span class="number">6</span> <span class="number">7</span> <span class="number">8</span> <span class="number">9</span></span><br></pre></td></tr></table></figure>

<p>上面就是heap的使用了。</p>
<h2 id="heap提供的方法"><a href="#heap提供的方法" class="headerlink" title="heap提供的方法"></a>heap提供的方法</h2><p>heap提供的方法不多，具体如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line">h := &amp;IntHeap&#123;<span class="number">3</span>, <span class="number">8</span>, <span class="number">6</span>&#125;  <span class="comment">// 创建IntHeap类型的原始数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(h Interface)</span>  // 对<span class="title">heap</span>进行初始化，生成小根堆（或大根堆）</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Push</span><span class="params">(h Interface, x <span class="keyword">interface</span>&#123;&#125;)</span>  // 往堆里面插入内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pop</span><span class="params">(h Interface)</span> <span class="title">interface</span></span>&#123;&#125;  <span class="comment">// 从堆顶pop出内容</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Remove</span><span class="params">(h Interface, i <span class="keyword">int</span>)</span> <span class="title">interface</span></span>&#123;&#125;  <span class="comment">// 从指定位置删除数据，并返回删除的数据</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fix</span><span class="params">(h Interface, i <span class="keyword">int</span>)</span>  // 从<span class="title">i</span>位置数据发生改变后，对堆再平衡，优先级队列使用到了该方法</span></span><br></pre></td></tr></table></figure>

<h2 id="heap源码剖析"><a href="#heap源码剖析" class="headerlink" title="heap源码剖析"></a>heap源码剖析</h2><p>heap的内部实现，是使用最小(最大)堆，索引排序从根节点开始，然后左子树，右子树的顺序方式。 内部实现的down和up分别表示对堆中的某个元素向下保证最小(最大)堆和向上保证最小(最大)堆。</p>
<p>当往堆中插入一个元素的时候，这个元素插入到最右子树的最后一个节点中，然后调用up向上保证最小(最大)堆。</p>
<p>当要从堆中推出一个元素的时候，先吧这个元素和右子树最后一个节点交换，然后弹出最后一个节点，然后对root调用down，向下保证最小(最大)堆。</p>
<p>好了，开始分析源码：</p>
<p>首先，在使用堆之前，必须调用它的Init方法，初始化堆，生成小根(大根)堆。Init方法源码如下:</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// A heap must be initialized before any of the heap operations</span></span><br><span class="line"><span class="comment">// can be used. Init is idempotent with respect to the heap invariants</span></span><br><span class="line"><span class="comment">// and may be called whenever the heap invariants may have been invalidated.</span></span><br><span class="line"><span class="comment">// Its complexity is O(n) where n = h.Len().</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Init</span><span class="params">(h Interface)</span></span> &#123;</span><br><span class="line">	<span class="comment">// heapify</span></span><br><span class="line">	n := h.Len()  <span class="comment">// 获取数据的长度</span></span><br><span class="line">	<span class="keyword">for</span> i := n/<span class="number">2</span> - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i-- &#123;  <span class="comment">// 从长度的一半开始，一直到第0个数据，每个位置都调用down方法，down方法实现的功能是保证从该位置往下保证形成堆</span></span><br><span class="line">		down(h, i, n)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看down的源码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">down</span><span class="params">(h Interface, i0, n <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	i := i0  <span class="comment">// 中间变量，第一次存储的是需要保证往下需要形成堆的节点位置</span></span><br><span class="line">	<span class="keyword">for</span> &#123;  <span class="comment">// 死循环</span></span><br><span class="line">		j1 := <span class="number">2</span>*i + <span class="number">1</span>  <span class="comment">// i节点的左子孩子</span></span><br><span class="line">		<span class="keyword">if</span> j1 &gt;= n || j1 &lt; <span class="number">0</span> &#123; <span class="comment">// j1 &lt; 0 after int overflow  // 保证其左子孩子没有越界</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		j := j1 <span class="comment">// left child  // 中间变量j先赋值为左子孩子，之后j将被赋值为左右子孩子中最小（大）的一个孩子的位置</span></span><br><span class="line">		<span class="keyword">if</span> j2 := j1 + <span class="number">1</span>; j2 &lt; n &amp;&amp; !h.Less(j1, j2) &#123;</span><br><span class="line">			j = j2 <span class="comment">// = 2*i + 2  // right child</span></span><br><span class="line">		&#125;  <span class="comment">// 这之后，j被赋值为两个孩子中的最小（大）孩子的位置（最小或最大由Less中定义的决定）</span></span><br><span class="line">		<span class="keyword">if</span> !h.Less(j, i) &#123;</span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;  <span class="comment">// 若j大于（小于）i，则终止循环</span></span><br><span class="line">		h.Swap(i, j)  <span class="comment">// 否则交换i和j位置的值</span></span><br><span class="line">		i = j  <span class="comment">// 令i=j，继续循环，保证j位置的子数是堆结构</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> i &gt; i0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这是建立堆的核心代码，其实，down并不能完全保证从某个节点往下每个节点都能保持堆的特性，只能保证某个节点的值如果不满足堆的性质，则将该值与其孩子交换，直到该值放到适合的位置，保证该值及其两个子孩子满足堆的性质。</p>
<p>但是，如果是通过Init循环调用down将能保证初始化后所有的节点都保持堆的特性，这是因为循环开始的<code>i := n/2 - 1</code>的取值位置，将会取到最大的一个拥有孩子节点的节点，并且该节点最多只有两个孩子，并且其孩子节点是叶子节点，从该节点往前每个节点如果都能保证down的特性，则整个列表也就符合了堆的性质了。</p>
<p>同样，有down就有up，up保证的是某个节点如果向上没有保证堆的性质，则将其与父节点进行交换，直到该节点放到某个特定位置保证了堆的性质。代码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">up</span><span class="params">(h Interface, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">for</span> &#123;  <span class="comment">// 死循环</span></span><br><span class="line">		i := (j - <span class="number">1</span>) / <span class="number">2</span> <span class="comment">// parent  // j节点的父节点</span></span><br><span class="line">		<span class="keyword">if</span> i == j || !h.Less(j, i) &#123;  <span class="comment">// 如果越界，或者满足堆的条件，则结束循环</span></span><br><span class="line">			<span class="keyword">break</span></span><br><span class="line">		&#125;</span><br><span class="line">		h.Swap(i, j)  <span class="comment">// 否则将该节点和父节点交换</span></span><br><span class="line">		j = i  <span class="comment">// 对父节点继续进行检查直到根节点</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上两个方法就是最核心的方法了，所有暴露出来的方法无非就是对这两个方法进行的封装。我们来看看以下这些方法的源码：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Push</span><span class="params">(h Interface, x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	h.Push(x)  <span class="comment">// 将新插入进来的节点放到最后</span></span><br><span class="line">	up(h, h.Len()<span class="number">-1</span>)  <span class="comment">// 确保新插进来的节点网上能保证堆结构</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Pop</span><span class="params">(h Interface)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">	n := h.Len() - <span class="number">1</span>  <span class="comment">// 把最后一个节点和第一个节点进行交换，之后，从根节点开始重新保证堆结构，最后把最后那个节点数据丢出并返回</span></span><br><span class="line">	h.Swap(<span class="number">0</span>, n)</span><br><span class="line">	down(h, <span class="number">0</span>, n)</span><br><span class="line">	<span class="keyword">return</span> h.Pop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Remove</span><span class="params">(h Interface, i <span class="keyword">int</span>)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">	n := h.Len() - <span class="number">1</span>  pop只是remove的特殊情况，remove是把i位置的节点和最后一个节点进行交换，之后保证从i节点往下及往上都保证堆结构，最后把最后一个节点的数据丢出并返回</span><br><span class="line">	<span class="keyword">if</span> n != i &#123;</span><br><span class="line">		h.Swap(i, n)</span><br><span class="line">		down(h, i, n)</span><br><span class="line">		up(h, i)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> h.Pop()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Fix</span><span class="params">(h Interface, i <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> !down(h, i, h.Len()) &#123;  <span class="comment">// i节点的数值发生改变后，需要保证堆的再平衡，先调用down保证该节点下面的堆结构，如果有位置交换，则需要保证该节点往上的堆结构，否则就不需要往上保证堆结构，一个小小的优化</span></span><br><span class="line">		up(h, i)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>以上就是go里面的heap所有的源码了，我也就不贴出完整版源码了，以上理解全部基于个人的理解，如有不当之处，还望批评指正。</p>
<h2 id="利用heap实现优先级队列"><a href="#利用heap实现优先级队列" class="headerlink" title="利用heap实现优先级队列"></a>利用heap实现优先级队列</h2><p>既然用到了heap，那就用heap实现一个优先级队列吧，这个功能是很好的一个功能。<br>源码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line">	<span class="string">"container/heap"</span></span><br><span class="line">	<span class="string">"fmt"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> Item <span class="keyword">struct</span> &#123;</span><br><span class="line">	value    <span class="keyword">string</span> <span class="comment">// 优先级队列中的数据，可以是任意类型，这里使用string</span></span><br><span class="line">	priority <span class="keyword">int</span>    <span class="comment">// 优先级队列中节点的优先级</span></span><br><span class="line">	index    <span class="keyword">int</span>    <span class="comment">// index是该节点在堆中的位置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 优先级队列需要实现heap的interface</span></span><br><span class="line"><span class="keyword">type</span> PriorityQueue []*Item</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定Len方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> <span class="built_in">len</span>(pq)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定Less方法，这里用的是小于号，生成的是小根堆</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span> <span class="title">Less</span><span class="params">(i, j <span class="keyword">int</span>)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> pq[i].priority &lt; pq[j].priority</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定swap方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq PriorityQueue)</span> <span class="title">Swap</span><span class="params">(i, j <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	pq[i], pq[j] = pq[j], pq[i]</span><br><span class="line">	pq[i].index, pq[j].index = i, j</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定put方法，将index置为-1是为了标识该数据已经出了优先级队列了</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span> <span class="title">Pop</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">	old := *pq</span><br><span class="line">	n := <span class="built_in">len</span>(old)</span><br><span class="line">	item := old[n<span class="number">-1</span>]</span><br><span class="line">	*pq = old[<span class="number">0</span> : n<span class="number">-1</span>]</span><br><span class="line">	item.index = <span class="number">-1</span></span><br><span class="line">	<span class="keyword">return</span> item</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 绑定push方法</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span> <span class="title">Push</span><span class="params">(x <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">	n := <span class="built_in">len</span>(*pq)</span><br><span class="line">	item := x.(*Item)</span><br><span class="line">	item.index = n</span><br><span class="line">	*pq = <span class="built_in">append</span>(*pq, item)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 更新修改了优先级和值的item在优先级队列中的位置</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(pq *PriorityQueue)</span> <span class="title">update</span><span class="params">(item *Item, value <span class="keyword">string</span>, priority <span class="keyword">int</span>)</span></span> &#123;</span><br><span class="line">	item.value = value</span><br><span class="line">	item.priority = priority</span><br><span class="line">	heap.Fix(pq, item.index)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="comment">// 创建节点并设计他们的优先级</span></span><br><span class="line">	items := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>&#123;<span class="string">"二毛"</span>: <span class="number">5</span>, <span class="string">"张三"</span>: <span class="number">3</span>, <span class="string">"狗蛋"</span>: <span class="number">9</span>&#125;</span><br><span class="line">	i := <span class="number">0</span></span><br><span class="line">	pq := <span class="built_in">make</span>(PriorityQueue, <span class="built_in">len</span>(items)) <span class="comment">// 创建优先级队列，并初始化</span></span><br><span class="line">	<span class="keyword">for</span> k, v := <span class="keyword">range</span> items &#123;             <span class="comment">// 将节点放到优先级队列中</span></span><br><span class="line">		pq[i] = &amp;Item&#123;</span><br><span class="line">			value:    k,</span><br><span class="line">			priority: v,</span><br><span class="line">			index:    i&#125;</span><br><span class="line">		i++</span><br><span class="line">	&#125;</span><br><span class="line">	heap.Init(&amp;pq) <span class="comment">// 初始化堆</span></span><br><span class="line">	item := &amp;Item&#123; <span class="comment">// 创建一个item</span></span><br><span class="line">		value:    <span class="string">"李四"</span>,</span><br><span class="line">		priority: <span class="number">1</span>,</span><br><span class="line">	&#125;</span><br><span class="line">	heap.Push(&amp;pq, item)           <span class="comment">// 入优先级队列</span></span><br><span class="line">	pq.update(item, item.value, <span class="number">6</span>) <span class="comment">// 更新item的优先级</span></span><br><span class="line">	<span class="keyword">for</span> <span class="built_in">len</span>(pq) &gt; <span class="number">0</span> &#123;</span><br><span class="line">		item := heap.Pop(&amp;pq).(*Item)</span><br><span class="line">		fmt.Printf(<span class="string">"%.2d:%s index:%.2d\n"</span>, item.priority, item.value, item.index)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">输出结果：</span><br><span class="line"><span class="number">03</span>:张三 index:<span class="number">-01</span></span><br><span class="line"><span class="number">05</span>:二毛 index:<span class="number">-01</span></span><br><span class="line"><span class="number">06</span>:李四 index:<span class="number">-01</span></span><br><span class="line"><span class="number">09</span>:狗蛋 index:<span class="number">-01</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>heap</tag>
      </tags>
  </entry>
  <entry>
    <title>GO数据类型概念</title>
    <url>/GO%E5%9F%BA%E7%A1%80.html</url>
    <content><![CDATA[<a id="more"></a>



<h3 id="数据类型概念"><a href="#数据类型概念" class="headerlink" title="数据类型概念"></a>数据类型概念</h3><ul>
<li><code>值类型</code>和<code>引用类型</code></li>
</ul>
<blockquote>
<p>两者的主要区别：拷贝操作和函数传参。<br>值类型的变量存储的是一个内存地址，引用类型的变量实际上是一个内存指针</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值类型：int、float、bool和string这些类型都属于值类型,</span></span><br><span class="line"><span class="comment">// 使用这些类型的变量直接指向存在内存中的值，，值类型的变量的值存储在栈中。当使用等号=将一个变量的值赋给另一个变量时，如 j = i ,实际上是在内存中将 i 的值进行了拷贝。可以通过 &amp;i 获取变量 i 的内存地址。  值拷贝</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型：特指slice、map、channel这三种预定义类型</span></span><br><span class="line"><span class="comment">// 引用类型拥有更复杂的存储结构:(1)分配内存 (2)初始化一系列属性等一个引用类型的变量r1存储的是r1的值所在的内存地址（数字），或内存地址中第一个字所在的位置，这个内存地址被称之为指针，这个指针实际上也被存在另外的某一个字中。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 定义了一个数组a，它是值类型，复制给b是copy，当b发生变化后a并不会发生任何变化</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    a := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    b := a</span><br><span class="line">    b[<span class="number">2</span>] = <span class="number">100</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1 2 3 4 5] [1 2 100 4 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 使用切片再试一下  (结果是一样的，因为切片a存的不是一个地址，而是一个指针，那么 a 和 b的指针一样了，通过b进行变量的操作，那么实际上影响的还是那个内存地址)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    <span class="comment">// 大家看到下面是不是迷惑了</span></span><br><span class="line">    <span class="comment">// 为什么这个和上面的写法看着都一样呀</span></span><br><span class="line">    <span class="comment">// 这就涉及到切片操作了</span></span><br><span class="line">    <span class="comment">// 通过字面量创建切片，这种方法和创建数组类似，只是不需要指定[]运算符里的值。初始的长度和容量会基于初始化时提供的元素的个数确定</span></span><br><span class="line">    a := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line">    b := a</span><br><span class="line">    b[<span class="number">2</span>] = <span class="number">8</span></span><br><span class="line">    fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// [1 2 8 4 5] [1 2 8 4 5]</span></span><br></pre></td></tr></table></figure>

<h3 id="2-数组-arrays"><a href="#2-数组-arrays" class="headerlink" title="2. 数组 arrays"></a>2. 数组 arrays</h3><ul>
<li>首先声明一个数组对象</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 因为没有设置一个值，所以默认为0 ， 下面是 声明一个数组变量a， 元素的数据类型是 int， 一共有五个元素</span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="keyword">int</span></span><br></pre></td></tr></table></figure>

<ul>
<li>赋值数组内的元素</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">//声明一个int数组，大小为5个, 每个元素默认为0 </span></span><br><span class="line"><span class="keyword">var</span> a [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过索引index的方式设置数组对象中元素的值 </span></span><br><span class="line"><span class="comment">// 语法 variableName[index] = value</span></span><br><span class="line"><span class="comment">// 需要注意的一点，就是数据类型，要和初始化时制定的数据类型一样才可以</span></span><br><span class="line">a[<span class="number">4</span>] = <span class="number">200</span></span><br><span class="line">a[<span class="number">3</span>] = <span class="number">100</span></span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"set: "</span>, a)</span><br><span class="line"><span class="comment">// result  set: [0 0 0 100 200]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>动态声明数组</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 我们大概有以下集中声明数组的方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1. 已知数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 这种方法，只是初始化，但是不带初始化值，也就是里面每个元素都为0</span></span><br><span class="line">vat array [<span class="number">5</span>]<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 即能初始化变量，又带了初始化值</span></span><br><span class="line"><span class="keyword">var</span> array = [<span class="number">5</span>]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 可以不用写具体的长度，使用`...`代替</span></span><br><span class="line"><span class="keyword">var</span> array = [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 简写</span></span><br><span class="line">array := [...]<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 当数组的长度是一个动态的值n的是时候，用上述的方法去初始化数组肯定会报错的，那这时候，我们应该去使用 `make` 函数</span></span><br><span class="line"></span><br><span class="line">array := <span class="built_in">make</span>([]<span class="keyword">int</span>, n)</span><br></pre></td></tr></table></figure>

<h3 id="3-切片-slice"><a href="#3-切片-slice" class="headerlink" title="3. 切片 slice"></a>3. 切片 slice</h3><blockquote>
<p>一个切片有三部分组成，地址指针、 长度、 容量</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 1. 长度是什么？</span></span><br><span class="line"><span class="comment">// 答： 是指可以访问的元素的个数</span></span><br><span class="line"><span class="comment">// eg： [1 2 3 4] 这个切片打印出来是这样的,那么这个切片的长度为4， 可以使用len函数去获取到这个值</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2. 容量是什么？</span></span><br><span class="line"><span class="comment">// 首先普及一个概念，容量不是指这个切片当前的长度，而是指这个切片可以增长到的长度</span></span><br><span class="line"><span class="comment">// 你可以这样理解，都玩过MySQL吧，建表的时候，字符串类型一般用varchar和char</span></span><br><span class="line"><span class="comment">// 那这两个字段类型有什么区别呢？ </span></span><br><span class="line"><span class="comment">// 你百度以下就知道了，我写下去，，又是一大堆字，懒得写，你就可以大致理解为，切片就类似于 varchar， 声明了一个200长度的字符串类型，唉，我就不放满，就放10个，就是玩，我也可以。 但是char就不行了，10个长度，你不放10个，，肯定报错！</span></span><br></pre></td></tr></table></figure>

<ul>
<li>通过 make() 函数创建切片</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个切片，长度和容量都为10个元素</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个切片，制定长度为5， 容量为10</span></span><br><span class="line">slice := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">5</span>, <span class="number">10</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>通过字面量创建切片</li>
</ul>
<blockquote>
<p>另一种常用的创建切片的方法是使用切片字面量，这种方法和创建数组类似，只是不需要指定[]运算符里的值。初始的长度和容量会基于初始化时提供的元素的个数确定：</p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建一个长度和容量都为3的字符串切片</span></span><br><span class="line">myStr := []<span class="keyword">string</span>&#123;<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个整型切片，长度和容量都为5</span></span><br><span class="line">myInt := []<span class="keyword">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建一个 长度为2 ， 容量为5 的整型切片</span></span><br><span class="line">myInt2 := myInt[<span class="number">0</span>:<span class="number">2</span>]</span><br><span class="line">fmt.Print(<span class="string">"myInt2 len &amp; cap "</span>, <span class="built_in">len</span>(myInt2), <span class="built_in">cap</span>(myInt2))</span><br><span class="line"><span class="comment">// myInt2 len &amp; cap 2 5</span></span><br></pre></td></tr></table></figure>

<ul>
<li>nil 和空切片<blockquote>
<p>程序可能需要声明一个值为 nil 的切片（也称nil切片）。只要在声明时不做任何初始化，就会创建一个 nil 切片</p>
</blockquote>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 创建nil 整型切片</span></span><br><span class="line"><span class="keyword">var</span> myNum []<span class="keyword">int</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建空的 整型切片</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用字面量写法</span></span><br><span class="line">myNum := []<span class="keyword">int</span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用make 写法</span></span><br><span class="line">myNum := <span class="built_in">make</span>([]<span class="keyword">int</span>, <span class="number">0</span>)</span><br></pre></td></tr></table></figure>

<h3 id="4-map"><a href="#4-map" class="headerlink" title="4. map"></a>4. map</h3><ul>
<li>声明map类型的变量<blockquote>
<p>语法： make(map[key-type]value-type)</p>
</blockquote>
</li>
</ul>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 1. 使用make 进行map数据类型变量的初始化 （引用类型变量需要初始化内存分配地址）</span></span><br><span class="line"></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[String]<span class="keyword">int</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">"m"</span>, m)</span><br><span class="line"><span class="comment">// map [ ]</span></span><br></pre></td></tr></table></figure>

<ul>
<li>进行map变量的内容赋值<blockquote>
<p>语法：经典的name[key] = value </p>
</blockquote>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">m := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">int</span>)</span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>go</tag>
      </tags>
  </entry>
  <entry>
    <title>GO语言list剖析</title>
    <url>/GO%E8%AF%AD%E8%A8%80list%E5%89%96%E6%9E%90.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>在GO语言的标准库中，提供了一个container包，这个包中提供了三种数据类型，就是heap,list和ring，本节要讲的是list的使用以及源码剖析。<br>要使用GO提供的list链表，则首先需要导入list包，如下所示：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"><span class="keyword">import</span>(</span><br><span class="line">	<span class="string">"container/list"</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<p>导入包之后，需要了解list中定义了两种数据类型，Element和List，定义如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Element is an element of a linked list.</span></span><br><span class="line"><span class="keyword">type</span> Element <span class="keyword">struct</span> &#123;</span><br><span class="line">    <span class="comment">// Next and previous pointers in the doubly-linked list of elements.</span></span><br><span class="line">    <span class="comment">// To simplify the implementation, internally a list l is implemented</span></span><br><span class="line">    <span class="comment">// as a ring, such that &amp;l.root is both the next element of the last</span></span><br><span class="line">    <span class="comment">// list element (l.Back()) and the previous element of the first list</span></span><br><span class="line">    <span class="comment">// element (l.Front()).</span></span><br><span class="line">    next, prev *Element</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The list to which this element belongs.</span></span><br><span class="line">    list *List</span><br><span class="line"></span><br><span class="line">    <span class="comment">// The value stored with this element.</span></span><br><span class="line">    Value <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">struct</span> &#123;</span><br><span class="line">    root Element <span class="comment">// sentinel list element, only &amp;root, root.prev, and root.next are used</span></span><br><span class="line">    <span class="built_in">len</span>  <span class="keyword">int</span>     <span class="comment">// current list length excluding (this) sentinel element</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Element里面定义了两个Element类型的指针next, prev以及List类型的指针list, Value用来存储值，List里面定义了一个Element作为链表的Root，len作为链表的长度。</p>
<p>import之后，就可以使用链表了：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>  &#123;</span><br><span class="line">    list_test:=list.New()  <span class="comment">// 创建list对象</span></span><br><span class="line">    list_test.PushBack(<span class="string">"123"</span>)  <span class="comment">// 往List队列尾部插入数据</span></span><br><span class="line">    list_test.PushBack(<span class="string">"456"</span>)</span><br><span class="line">    list_test.PushBack(<span class="string">"789"</span>)</span><br><span class="line">    fmt.Println(list_test.Len())  <span class="comment">// 输出list长度</span></span><br><span class="line">    fmt.Println(list_test.Front())  <span class="comment">// 输出list第一个元素</span></span><br><span class="line">    fmt.Println(list_test.Front().Next())  <span class="comment">// 输出list第一个元素的下一个元素</span></span><br><span class="line">    fmt.Println(list_test.Front().Next().Next())  <span class="comment">// 输出list第三个元素</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="list提供的方法"><a href="#list提供的方法" class="headerlink" title="list提供的方法"></a>list提供的方法</h2><p>list提供的方法如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">type</span> Element</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(e *Element)</span> <span class="title">Next</span><span class="params">()</span> *<span class="title">Element</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(e *Element)</span> <span class="title">Prev</span><span class="params">()</span> *<span class="title">Element</span></span></span><br><span class="line"><span class="keyword">type</span> List</span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">List</span></span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Back</span><span class="params">()</span> *<span class="title">Element</span>   // 返回最后一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Front</span><span class="params">()</span> *<span class="title">Element</span>  // 返回第一个元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Init</span><span class="params">()</span> *<span class="title">List</span>  // 链表初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">InsertAfter</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, mark *Element)</span> *<span class="title">Element</span> // 在某个元素前插入</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">InsertBefore</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, mark *Element)</span> *<span class="title">Element</span>  // 在某个元素后插入</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span> // 返回链表长度</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">MoveAfter</span><span class="params">(e, mark *Element)</span>  // 把<span class="title">e</span>元素移动到<span class="title">mark</span>之后</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">MoveBefore</span><span class="params">(e, mark *Element)</span>  // 把<span class="title">e</span>元素移动到<span class="title">mark</span>之前</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">MoveToBack</span><span class="params">(e *Element)</span> // 把<span class="title">e</span>元素移动到队列最后</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">MoveToFront</span><span class="params">(e *Element)</span> // 把<span class="title">e</span>元素移动到队列最头部</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushBack</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">Element</span>  // 在队列最后插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushBackList</span><span class="params">(other *List)</span>  // 在队列最后插入接上新队列</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushFront</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">Element</span>  // 在队列头部插入元素</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushFrontList</span><span class="params">(other *List)</span> // 在队列头部插入接上新队列</span></span><br><span class="line">    <span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Remove</span><span class="params">(e *Element)</span> <span class="title">interface</span></span>&#123;&#125; <span class="comment">// 删除某个元素</span></span><br></pre></td></tr></table></figure>

<h2 id="源码剖析"><a href="#源码剖析" class="headerlink" title="源码剖析"></a>源码剖析</h2><p>首先，使用list.New()方法，返回的是一个List对象的指针，源码<figure class="highlight plain"><figcaption><span>New() *List &#123; return new(List).Init() &#125;```并执行了List对象的Init()方法对list进行初始化，初始化root的prev和next指针以及list的长度。</span></figcaption><table><tr><td class="code"><pre><span class="line">之后调用list_test.PushBack(&quot;123&quot;)在队列尾部插入元素123，源码如下：</span><br><span class="line"></span><br><span class="line">```go</span><br><span class="line">func (l *List) PushBack(v interface&#123;&#125;) *Element &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	return l.insertValue(v, l.root.prev)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>
<p>调用lazyInit(),如果链表没有初始化，则先初始化一遍，之后，调用list的insertValue方法，insertValue方法初始化节点之后，调用insert方法进行插入链表。</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">insertValue</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, at *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> l.insert(&amp;Element&#123;Value: v&#125;, at)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>整篇文章最精髓的地方就在insert方法中了，源码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">insert</span><span class="params">(e, at *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	n := at.next  <span class="comment">// 用中间变量n保存at节点的next指针</span></span><br><span class="line">	at.next = e  <span class="comment">// at节点的next指向要插入的节点</span></span><br><span class="line">	e.prev = at  <span class="comment">// 要插入的节点e的prev指向at节点</span></span><br><span class="line">	e.next = n  <span class="comment">// e的next节点指向中间变量n保存的指针</span></span><br><span class="line">	n.prev = e  <span class="comment">// at节点的下一个节点的prev指向e节点</span></span><br><span class="line">	e.list = l  <span class="comment">// e节点的list指向链表的root节点</span></span><br><span class="line">	l.<span class="built_in">len</span>++  <span class="comment">// 链表的长度加一</span></span><br><span class="line">	<span class="keyword">return</span> e  <span class="comment">// 返回刚插入节点的指针</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这里的链表结构是双向链表，并且在root节点的prev指针指向了链表的结尾，链表结尾的next指针也指向了root节点，这样，其实形成了一个环形结构，如果是向链表的尾部插入新数据，则将root.prev传递给insert方法的at参数，如果是向头部插入，则将root传递给insert方法的at参数。</p>
<p><strong><em>这样做的好处是显而易见的，那就是从链表的尾部插入数据，将不需要遍历一遍链表，而只需要将root节点的prev传递给insert方法中就可以了，大大节省了从尾部插入节点的时间。这段代码我看了很久，觉得这个包中最精髓的地方也就在这了，这也是这篇文章诞生的原因。</em></strong></p>
<p>源码如下：</p>
<figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Copyright 2009 The Go Authors. All rights reserved.</span></span><br><span class="line"><span class="comment">// Use of this source code is governed by a BSD-style</span></span><br><span class="line"><span class="comment">// license that can be found in the LICENSE file.</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Package list implements a doubly linked list.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// To iterate over a list (where l is a *List):</span></span><br><span class="line"><span class="comment">//	for e := l.Front(); e != nil; e = e.Next() &#123;</span></span><br><span class="line"><span class="comment">//		// do something with e.Value</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">package</span> list</span><br><span class="line"></span><br><span class="line"><span class="comment">// Element is an element of a linked list.</span></span><br><span class="line"><span class="keyword">type</span> Element <span class="keyword">struct</span> &#123;</span><br><span class="line">	<span class="comment">// Next and previous pointers in the doubly-linked list of elements.</span></span><br><span class="line">	<span class="comment">// To simplify the implementation, internally a list l is implemented</span></span><br><span class="line">	<span class="comment">// as a ring, such that &amp;l.root is both the next element of the last</span></span><br><span class="line">	<span class="comment">// list element (l.Back()) and the previous element of the first list</span></span><br><span class="line">	<span class="comment">// element (l.Front()).</span></span><br><span class="line">	next, prev *Element</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The list to which this element belongs.</span></span><br><span class="line">	list *List</span><br><span class="line"></span><br><span class="line">	<span class="comment">// The value stored with this element.</span></span><br><span class="line">	Value <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Next returns the next list element or nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Element)</span> <span class="title">Next</span><span class="params">()</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> p := e.next; e.list != <span class="literal">nil</span> &amp;&amp; p != &amp;e.list.root &#123;</span><br><span class="line">		<span class="keyword">return</span> p</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Prev returns the previous list element or nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Element)</span> <span class="title">Prev</span><span class="params">()</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> p := e.prev; e.list != <span class="literal">nil</span> &amp;&amp; p != &amp;e.list.root &#123;</span><br><span class="line">		<span class="keyword">return</span> p</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// List represents a doubly linked list.</span></span><br><span class="line"><span class="comment">// The zero value for List is an empty list ready to use.</span></span><br><span class="line"><span class="keyword">type</span> List <span class="keyword">struct</span> &#123;</span><br><span class="line">	root Element <span class="comment">// sentinel list element, only &amp;root, root.prev, and root.next are used</span></span><br><span class="line">	<span class="built_in">len</span>  <span class="keyword">int</span>     <span class="comment">// current list length excluding (this) sentinel element</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Init initializes or clears list l.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Init</span><span class="params">()</span> *<span class="title">List</span></span> &#123;</span><br><span class="line">	l.root.next = &amp;l.root</span><br><span class="line">	l.root.prev = &amp;l.root</span><br><span class="line">	l.<span class="built_in">len</span> = <span class="number">0</span></span><br><span class="line">	<span class="keyword">return</span> l</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// New returns an initialized list.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">New</span><span class="params">()</span> *<span class="title">List</span></span> &#123; <span class="keyword">return</span> <span class="built_in">new</span>(List).Init() &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Len returns the number of elements of list l.</span></span><br><span class="line"><span class="comment">// The complexity is O(1).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Len</span><span class="params">()</span> <span class="title">int</span></span> &#123; <span class="keyword">return</span> l.<span class="built_in">len</span> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Front returns the first element of list l or nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Front</span><span class="params">()</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> l.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l.root.next</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Back returns the last element of list l or nil.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Back</span><span class="params">()</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> l.<span class="built_in">len</span> == <span class="number">0</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> l.root.prev</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// lazyInit lazily initializes a zero List value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">lazyInit</span><span class="params">()</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> l.root.next == <span class="literal">nil</span> &#123;</span><br><span class="line">		l.Init()</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insert inserts e after at, increments l.len, and returns e.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">insert</span><span class="params">(e, at *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	n := at.next</span><br><span class="line">	at.next = e</span><br><span class="line">	e.prev = at</span><br><span class="line">	e.next = n</span><br><span class="line">	n.prev = e</span><br><span class="line">	e.list = l</span><br><span class="line">	l.<span class="built_in">len</span>++</span><br><span class="line">	<span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// insertValue is a convenience wrapper for insert(&amp;Element&#123;Value: v&#125;, at).</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">insertValue</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, at *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">return</span> l.insert(&amp;Element&#123;Value: v&#125;, at)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// remove removes e from its list, decrements l.len, and returns e.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">remove</span><span class="params">(e *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	e.prev.next = e.next</span><br><span class="line">	e.next.prev = e.prev</span><br><span class="line">	e.next = <span class="literal">nil</span> <span class="comment">// avoid memory leaks</span></span><br><span class="line">	e.prev = <span class="literal">nil</span> <span class="comment">// avoid memory leaks</span></span><br><span class="line">	e.list = <span class="literal">nil</span></span><br><span class="line">	l.<span class="built_in">len</span>--</span><br><span class="line">	<span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Remove removes e from l if e is an element of list l.</span></span><br><span class="line"><span class="comment">// It returns the element value e.Value.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">Remove</span><span class="params">(e *Element)</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">	<span class="keyword">if</span> e.list == l &#123;</span><br><span class="line">		<span class="comment">// if e.list == l, l must have been initialized when e was inserted</span></span><br><span class="line">		<span class="comment">// in l or l == nil (e is a zero Element) and l.remove will crash</span></span><br><span class="line">		l.remove(e)</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> e.Value</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PushFront inserts a new element e with value v at the front of list l and returns e.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushFront</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	<span class="keyword">return</span> l.insertValue(v, &amp;l.root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PushBack inserts a new element e with value v at the back of list l and returns e.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushBack</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	<span class="keyword">return</span> l.insertValue(v, l.root.prev)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertBefore inserts a new element e with value v immediately before mark and returns e.</span></span><br><span class="line"><span class="comment">// If mark is not an element of l, the list is not modified.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">InsertBefore</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, mark *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> mark.list != l &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// see comment in List.Remove about initialization of l</span></span><br><span class="line">	<span class="keyword">return</span> l.insertValue(v, mark.prev)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// InsertAfter inserts a new element e with value v immediately after mark and returns e.</span></span><br><span class="line"><span class="comment">// If mark is not an element of l, the list is not modified.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">InsertAfter</span><span class="params">(v <span class="keyword">interface</span>&#123;&#125;, mark *Element)</span> *<span class="title">Element</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> mark.list != l &#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// see comment in List.Remove about initialization of l</span></span><br><span class="line">	<span class="keyword">return</span> l.insertValue(v, mark)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MoveToFront moves element e to the front of list l.</span></span><br><span class="line"><span class="comment">// If e is not an element of l, the list is not modified.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">MoveToFront</span><span class="params">(e *Element)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> e.list != l || l.root.next == e &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// see comment in List.Remove about initialization of l</span></span><br><span class="line">	l.insert(l.remove(e), &amp;l.root)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MoveToBack moves element e to the back of list l.</span></span><br><span class="line"><span class="comment">// If e is not an element of l, the list is not modified.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">MoveToBack</span><span class="params">(e *Element)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> e.list != l || l.root.prev == e &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">// see comment in List.Remove about initialization of l</span></span><br><span class="line">	l.insert(l.remove(e), l.root.prev)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MoveBefore moves element e to its new position before mark.</span></span><br><span class="line"><span class="comment">// If e or mark is not an element of l, or e == mark, the list is not modified.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">MoveBefore</span><span class="params">(e, mark *Element)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> e.list != l || e == mark || mark.list != l &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	l.insert(l.remove(e), mark.prev)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// MoveAfter moves element e to its new position after mark.</span></span><br><span class="line"><span class="comment">// If e or mark is not an element of l, or e == mark, the list is not modified.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">MoveAfter</span><span class="params">(e, mark *Element)</span></span> &#123;</span><br><span class="line">	<span class="keyword">if</span> e.list != l || e == mark || mark.list != l &#123;</span><br><span class="line">		<span class="keyword">return</span></span><br><span class="line">	&#125;</span><br><span class="line">	l.insert(l.remove(e), mark)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PushBackList inserts a copy of an other list at the back of list l.</span></span><br><span class="line"><span class="comment">// The lists l and other may be the same.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushBackList</span><span class="params">(other *List)</span></span> &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	<span class="keyword">for</span> i, e := other.Len(), other.Front(); i &gt; <span class="number">0</span>; i, e = i<span class="number">-1</span>, e.Next() &#123;</span><br><span class="line">		l.insertValue(e.Value, l.root.prev)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// PushFrontList inserts a copy of an other list at the front of list l.</span></span><br><span class="line"><span class="comment">// The lists l and other may be the same.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(l *List)</span> <span class="title">PushFrontList</span><span class="params">(other *List)</span></span> &#123;</span><br><span class="line">	l.lazyInit()</span><br><span class="line">	<span class="keyword">for</span> i, e := other.Len(), other.Back(); i &gt; <span class="number">0</span>; i, e = i<span class="number">-1</span>, e.Prev() &#123;</span><br><span class="line">		l.insertValue(e.Value, &amp;l.root)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>golang</category>
      </categories>
      <tags>
        <tag>golang</tag>
        <tag>list</tag>
      </tags>
  </entry>
  <entry>
    <title>celery中停止执行task</title>
    <url>/celery%E4%B8%AD%E5%81%9C%E6%AD%A2%E6%89%A7%E8%A1%8Ctask.html</url>
    <content><![CDATA[<a id="more"></a>

<h2 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h2><p>因为最近项目需求中需要提供对异步执行任务终止的功能，所以在寻找停止celery task任务的方法。这种需求以前没有碰到过，所以，只能求助于百度和google，但是找遍了资料，都没找到相关的能停止celery task任务的方法(网上找到的一个方法实测不能用，可能是celery版本的原因，我的项目目前使用的是celery 4.0.2)</p>
<h2 id="解决过程"><a href="#解决过程" class="headerlink" title="解决过程"></a>解决过程</h2><p>由于网上找不到解决办法，于是只能自己想办法了。<br>想到celery 管理工具flower里面好像有停止celery task的功能，于是去找flower的源码，找到接口的源码如下:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">logger.info(<span class="string">"Revoking task '%s'"</span>, taskid)</span><br><span class="line">terminate = self.get_argument(<span class="string">'terminate'</span>, default=<span class="literal">False</span>, type=bool)</span><br><span class="line">self.capp.control.revoke(taskid, terminate=terminate)</span><br><span class="line">self.write(dict(message=<span class="string">"Revoked '%s'"</span> % taskid))</span><br></pre></td></tr></table></figure>

<p>核心代码是<code>self.capp.control.revoke</code> 想到去celery里面找寻<code>revoke</code>函数，发现有两处比较可疑，第一个是<code>celery.worker.control.revoke</code>，第二个是<code>celery.app.control.Control.revoke</code>，直觉来看，应该是第二个方法，但是第二个方法是在一个类里面的，要调用这个方法首先需要获取到celery app的实例，后来去celery 配置里面找，发现在<strong>init</strong>.py文件里面有<code>__all__ = [&#39;celery_app&#39;]</code>这么一句，于是找到突破点了，引用这个包就能获取到celery_app了。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> test.ceyery_proj <span class="keyword">import</span> celery_app</span><br><span class="line">celery_app.control.revoke(task_id, terminate=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure>

<p>通过这个方法就能终止正在执行的task，至于task_id在执行任务的时候返回了，我将这个id存储在数据库中，这样就可以被拿来控制task的执行了。</p>
<p>写这篇文档的目的主要是帮助小伙伴们不要再踩这个坑了，也为celery提供一点文档补充吧。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>celery</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 7 安装mariadb</title>
    <url>/centos%207%20%E5%AE%89%E8%A3%85mariadb.html</url>
    <content><![CDATA[<a id="more"></a>


<p>@<a href="Centos安装MariaDB">TOC</a></p>
<h5 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h5><p><strong>听说Oracle 公司要对mysql 进行推出收费版本了,一般收费版本肯定要比免费使用的版本功能更强大些,所以我感觉说不定要对免费版本限制功能了,那这样的话,还不如开始使用MySQL原作者推出的免费版–mariadb<br>其实就一点,跟centos一个样  免费跟收费的区别,所以一般公司用的还大多是centos  ,为啥 不收费呀!  ,而且centos就是rhel是一模一样的,唯一的差别改了一个图标而已,t同理,mysql跟mariadb底层是通用的,mariadb兼容MySQL,而且在MySQL的基础上增加了很多功能,更为强大好用</strong></p>
<hr>
<p>&nbsp; </p>
<p>  由于官网的MariaDB版本要比阿里云的版本要高，所以我们应该优先使用官方的版本</p>
<blockquote>
<p>注意:　在centos7 中默认使用的数据库已经切换成了mariadb,所以我们通过yum安装的时候,直接安装MySQL就行</p>
</blockquote>
<p>首先 添加MariaDB yum仓库</p>
<h6 id="1、首先在-RHEL-CentOS-和-Fedora-操作系统中添加-MariaDB-的-YUM-配置文件-MariaDB-repo-文件。"><a href="#1、首先在-RHEL-CentOS-和-Fedora-操作系统中添加-MariaDB-的-YUM-配置文件-MariaDB-repo-文件。" class="headerlink" title="1、首先在 RHEL/CentOS 和 Fedora 操作系统中添加 MariaDB 的 YUM 配置文件 MariaDB.repo 文件。"></a>1、首先在 RHEL/CentOS 和 Fedora 操作系统中添加 MariaDB 的 YUM 配置文件 MariaDB.repo 文件。</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 编辑创建mariadb.repo仓库文件</span><br><span class="line">vi /etc/yum.repos.d/MariaDB.repo</span><br></pre></td></tr></table></figure>

<h6 id="2、添加repo仓库配置"><a href="#2、添加repo仓库配置" class="headerlink" title="2、添加repo仓库配置"></a>2、添加repo仓库配置</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name=MariaDB</span><br><span class="line">baseurl=http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>

<h6 id="3、当-MariaDB-仓库地址添加好后，你可以通过下面的一行命令轻松安装-MariaDB。"><a href="#3、当-MariaDB-仓库地址添加好后，你可以通过下面的一行命令轻松安装-MariaDB。" class="headerlink" title="3、当 MariaDB 仓库地址添加好后，你可以通过下面的一行命令轻松安装 MariaDB。"></a>3、当 MariaDB 仓库地址添加好后，你可以通过下面的一行命令轻松安装 MariaDB。</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install MariaDB-server MariaDB-client -y</span><br></pre></td></tr></table></figure>

<h6 id="4、如果官方的版本下载太慢，我们就直接使用阿里云的比较低的版本也可以"><a href="#4、如果官方的版本下载太慢，我们就直接使用阿里云的比较低的版本也可以" class="headerlink" title="4、如果官方的版本下载太慢，我们就直接使用阿里云的比较低的版本也可以"></a>4、如果官方的版本下载太慢，我们就直接使用阿里云的比较低的版本也可以</h6><p>(1) 删除或者重命名刚才创建的Mariadb.repo文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br><span class="line">mv Mariadb.repo Mariadb.repo.bak</span><br></pre></td></tr></table></figure>

<p>(2) 然后一条命令安装Mariadb</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server mariadb -y</span><br></pre></td></tr></table></figure>

<h6 id="5-启动mariadb命令"><a href="#5-启动mariadb命令" class="headerlink" title="5  启动mariadb命令"></a>5  启动mariadb命令</h6><p>mariadb数据库的相关命令是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb  # 启动MariaDB</span><br><span class="line">systemctl stop mariadb  # 停止MariaDB</span><br><span class="line">systemctl restart mariadb  # 重启MariaDB</span><br><span class="line">systemctl enable mariadb  # 设置开机启动</span><br></pre></td></tr></table></figure>

<h6 id="6-初始化mysql"><a href="#6-初始化mysql" class="headerlink" title="6 初始化mysql"></a>6 初始化mysql</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5sdXpob25nMTUwMzk0L2ltZy9tYXN0ZXIvMTIzLnBuZw" alt><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5sdXpob25nMTUwMzk0L2ltZy9tYXN0ZXIvMi5wbmc" alt></p>
<h6 id="7-使用mysql命令进入数据库"><a href="#7-使用mysql命令进入数据库" class="headerlink" title="7 使用mysql命令进入数据库"></a>7 使用mysql命令进入数据库</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h6 id="8-mysql基本操作"><a href="#8-mysql基本操作" class="headerlink" title="8 mysql基本操作"></a>8 mysql基本操作</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1 创建数据库</span><br><span class="line">2 创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> qishitb (<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">11</span>));</span><br><span class="line">3 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> qishitb <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">"陈鹏"</span>);</span><br><span class="line">4 查看数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> qishitb;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查看数据库的信息</span><br><span class="line">\s</span><br><span class="line"></span><br><span class="line">查看表的编码信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> qishitb</span><br></pre></td></tr></table></figure>

<h6 id="9-解决中文乱码问题"><a href="#9-解决中文乱码问题" class="headerlink" title="9 解决中文乱码问题"></a>9 解决中文乱码问题</h6><p>(1)  修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>(2) 添加以下配置文件(如图)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5sdXpob25nMTUwMzk0L2ltZy9tYXN0ZXIvZGF5OTQucG5n" alt></p>
<p>(3)  重启数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>centos 7 安装mariadb2222</title>
    <url>/centos%207%20%E5%AE%89%E8%A3%85mariadb%20copy.html</url>
    <content><![CDATA[<a id="more"></a>


<p>@<a href="Centos安装MariaDB">TOC</a></p>
<h5 id="序言"><a href="#序言" class="headerlink" title="序言"></a>序言</h5><p><strong>听说Oracle 公司要对mysql 进行推出收费版本了,一般收费版本肯定要比免费使用的版本功能更强大些,所以我感觉说不定要对免费版本限制功能了,那这样的话,还不如开始使用MySQL原作者推出的免费版–mariadb<br>其实就一点,跟centos一个样  免费跟收费的区别,所以一般公司用的还大多是centos  ,为啥 不收费呀!  ,而且centos就是rhel是一模一样的,唯一的差别改了一个图标而已,t同理,mysql跟mariadb底层是通用的,mariadb兼容MySQL,而且在MySQL的基础上增加了很多功能,更为强大好用</strong></p>
<hr>
<p>&nbsp; </p>
<p>  由于官网的MariaDB版本要比阿里云的版本要高，所以我们应该优先使用官方的版本</p>
<blockquote>
<p>注意:　在centos7 中默认使用的数据库已经切换成了mariadb,所以我们通过yum安装的时候,直接安装MySQL就行</p>
</blockquote>
<p>首先 添加MariaDB yum仓库</p>
<h6 id="1、首先在-RHEL-CentOS-和-Fedora-操作系统中添加-MariaDB-的-YUM-配置文件-MariaDB-repo-文件。"><a href="#1、首先在-RHEL-CentOS-和-Fedora-操作系统中添加-MariaDB-的-YUM-配置文件-MariaDB-repo-文件。" class="headerlink" title="1、首先在 RHEL/CentOS 和 Fedora 操作系统中添加 MariaDB 的 YUM 配置文件 MariaDB.repo 文件。"></a>1、首先在 RHEL/CentOS 和 Fedora 操作系统中添加 MariaDB 的 YUM 配置文件 MariaDB.repo 文件。</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span> 编辑创建mariadb.repo仓库文件</span><br><span class="line">vi /etc/yum.repos.d/MariaDB.repo</span><br></pre></td></tr></table></figure>

<h6 id="2、添加repo仓库配置"><a href="#2、添加repo仓库配置" class="headerlink" title="2、添加repo仓库配置"></a>2、添加repo仓库配置</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">[mariadb]</span><br><span class="line">name=MariaDB</span><br><span class="line">baseurl=http://yum.mariadb.org/10.1/centos7-amd64</span><br><span class="line">gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB</span><br><span class="line">gpgcheck=1</span><br></pre></td></tr></table></figure>

<h6 id="3、当-MariaDB-仓库地址添加好后，你可以通过下面的一行命令轻松安装-MariaDB。"><a href="#3、当-MariaDB-仓库地址添加好后，你可以通过下面的一行命令轻松安装-MariaDB。" class="headerlink" title="3、当 MariaDB 仓库地址添加好后，你可以通过下面的一行命令轻松安装 MariaDB。"></a>3、当 MariaDB 仓库地址添加好后，你可以通过下面的一行命令轻松安装 MariaDB。</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install MariaDB-server MariaDB-client -y</span><br></pre></td></tr></table></figure>

<h6 id="4、如果官方的版本下载太慢，我们就直接使用阿里云的比较低的版本也可以"><a href="#4、如果官方的版本下载太慢，我们就直接使用阿里云的比较低的版本也可以" class="headerlink" title="4、如果官方的版本下载太慢，我们就直接使用阿里云的比较低的版本也可以"></a>4、如果官方的版本下载太慢，我们就直接使用阿里云的比较低的版本也可以</h6><p>(1) 删除或者重命名刚才创建的Mariadb.repo文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd /etc/yum.repos.d</span><br><span class="line">mv Mariadb.repo Mariadb.repo.bak</span><br></pre></td></tr></table></figure>

<p>(2) 然后一条命令安装Mariadb</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">yum install mariadb-server mariadb -y</span><br></pre></td></tr></table></figure>

<h6 id="5-启动mariadb命令"><a href="#5-启动mariadb命令" class="headerlink" title="5  启动mariadb命令"></a>5  启动mariadb命令</h6><p>mariadb数据库的相关命令是：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl start mariadb  # 启动MariaDB</span><br><span class="line">systemctl stop mariadb  # 停止MariaDB</span><br><span class="line">systemctl restart mariadb  # 重启MariaDB</span><br><span class="line">systemctl enable mariadb  # 设置开机启动</span><br></pre></td></tr></table></figure>

<h6 id="6-初始化mysql"><a href="#6-初始化mysql" class="headerlink" title="6 初始化mysql"></a>6 初始化mysql</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5sdXpob25nMTUwMzk0L2ltZy9tYXN0ZXIvMTIzLnBuZw" alt><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5sdXpob25nMTUwMzk0L2ltZy9tYXN0ZXIvMi5wbmc" alt></p>
<h6 id="7-使用mysql命令进入数据库"><a href="#7-使用mysql命令进入数据库" class="headerlink" title="7 使用mysql命令进入数据库"></a>7 使用mysql命令进入数据库</h6><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure>

<h6 id="8-mysql基本操作"><a href="#8-mysql基本操作" class="headerlink" title="8 mysql基本操作"></a>8 mysql基本操作</h6><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">1 创建数据库</span><br><span class="line">2 创建表</span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> qishitb (<span class="keyword">id</span> <span class="built_in">int</span>, <span class="keyword">name</span> <span class="built_in">char</span>(<span class="number">11</span>));</span><br><span class="line">3 插入数据</span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> qishitb <span class="keyword">values</span>(<span class="number">1</span>, <span class="string">"陈鹏"</span>);</span><br><span class="line">4 查看数据</span><br><span class="line"><span class="keyword">select</span> * <span class="keyword">from</span> qishitb;</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">查看数据库的信息</span><br><span class="line">\s</span><br><span class="line"></span><br><span class="line">查看表的编码信息</span><br><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> qishitb</span><br></pre></td></tr></table></figure>

<h6 id="9-解决中文乱码问题"><a href="#9-解决中文乱码问题" class="headerlink" title="9 解决中文乱码问题"></a>9 解决中文乱码问题</h6><p>(1)  修改配置文件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim /etc/my.cnf</span><br></pre></td></tr></table></figure>

<p>(2) 添加以下配置文件(如图)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">[mysqld]</span><br><span class="line">character-set-server=utf8</span><br><span class="line">collation-server=utf8_general_ci</span><br><span class="line">log-error=/var/log/mysqld.log</span><br><span class="line">[client]</span><br><span class="line">default-character-set=utf8</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set=utf8</span><br></pre></td></tr></table></figure>

<p><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2NoZW5sdXpob25nMTUwMzk0L2ltZy9tYXN0ZXIvZGF5OTQucG5n" alt></p>
<p>(3)  重启数据库</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart mariadb</span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>数据库2</category>
      </categories>
      <tags>
        <tag>linux2</tag>
      </tags>
  </entry>
  <entry>
    <title>flask笔记</title>
    <url>/flask%E7%AC%94%E8%AE%B0.html</url>
    <content><![CDATA[<h3 id="FLASK-安装"><a href="#FLASK-安装" class="headerlink" title="FLASK 安装"></a>FLASK 安装</h3><p>先创建一个虚拟环境，并使用pycharm 初始化一个pure python项目</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">mkvirtualenv  flask_demo -p python3</span><br></pre></td></tr></table></figure>

<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip install flask==<span class="number">0.12</span>.<span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>flask的简单组成</p>
<p>初始化flask  ==》  路由</p>
<p>创建一个flask 应用</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 创建flask 应用</span></span><br><span class="line">app = Flask(__name__)</span><br></pre></td></tr></table></figure>

<p>路由-限定请求方式</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">idnex</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">'这里是首页'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##路由-限定请求方式</span></span><br><span class="line"><span class="comment">## route 中有个参数methods 是定义请求类型的，只有定义了才能访问，</span></span><br><span class="line"><span class="comment">#默认的是开启get的</span></span><br><span class="line"><span class="meta">@app.route('/',methods=["get","post"])</span></span><br><span class="line"><span class="function"><span class="keyword">def</span>  <span class="title">idnex</span><span class="params">()</span>:</span></span><br><span class="line">	<span class="keyword">return</span> <span class="string">'这里是首页'</span></span><br></pre></td></tr></table></figure>

<p>开启debug模式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">DEBUG = True</span><br></pre></td></tr></table></figure>

<p>在主文件导入配置文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span></span></span><br><span class="line">	DEBUG = True</span><br><span class="line">	</span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 最常用的方式是通过对象的方式， 通过导包，将配置文件加载</span></span><br></pre></td></tr></table></figure>

<p>启动flask </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.run(host=<span class="string">'localhost'</span>,port=<span class="number">8080</span>,debug=true)</span><br><span class="line">    <span class="comment"># flask 内部作为一个基本的web框架，内置http服务器肯定有的。</span></span><br><span class="line">    <span class="comment">#运行flask 可以使用 app.run（）</span></span><br><span class="line">    <span class="comment"># host 服务器启动时绑定的域名</span></span><br><span class="line">    <span class="comment">#port 服务器启动时绑定的端口</span></span><br><span class="line">    <span class="comment">#debug 是否开启调试模式</span></span><br></pre></td></tr></table></figure>

<h3 id="简单的flask-demo详解"><a href="#简单的flask-demo详解" class="headerlink" title="简单的flask demo详解"></a>简单的flask demo详解</h3><h5 id="在路由中设置变量（传递参数-两种）"><a href="#在路由中设置变量（传递参数-两种）" class="headerlink" title="在路由中设置变量（传递参数-两种）"></a>在路由中设置变量（传递参数-两种）</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 使用'&lt; &gt;'  表示变量名，</span></span><br><span class="line"><span class="comment">##&lt;int:变量名&gt;表示限制变量的数据类型</span></span><br><span class="line"><span class="meta">@app.route("/user/&lt;int:userid&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(userid)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"用户个人中心%s"</span> % userid</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">限制参数类型</span></span><br><span class="line"><span class="string">int:变量名     #当前路由内容只能是整型</span></span><br><span class="line"><span class="string">float:变量名   #当前路由内容只能是 浮点数</span></span><br><span class="line"><span class="string">path:变量名   #当前路由内容可以是任何内容</span></span><br><span class="line"><span class="string">"""</span></span><br></pre></td></tr></table></figure>

<h4 id="正则匹配路由"><a href="#正则匹配路由" class="headerlink" title="正则匹配路由"></a>正则匹配路由</h4><p>1.首先导入转换器基类</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> werkzeug.routing <span class="keyword">import</span> BaseConverter</span><br></pre></td></tr></table></figure>

<p>2.自定义转换器</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RegexCover</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, map,*args)</span>:</span></span><br><span class="line">        super(RegexCover,self).__init__(map)</span><br><span class="line">        <span class="comment">## 正则参数</span></span><br><span class="line">        self.regex = args[<span class="number">0</span>]</span><br></pre></td></tr></table></figure>

<p>3.将自定义的转换器添加到转换器字典中，并指定转换器使用的别名</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.url_map.converters[<span class="string">'regex'</span>]  = RegexCover</span><br></pre></td></tr></table></figure>

<p>4.就可以通过正则去获取参数变量了</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## regex 后面跟一个元组，元祖里面是正则表达式，mobile是变量名</span></span><br><span class="line"><span class="meta">@app.route("/user/&lt;regex('\d+'):mobile&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(mobile)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"用户手机号%s"</span> % mobile</span><br></pre></td></tr></table></figure>

<h5 id="预定义正则匹配路由"><a href="#预定义正则匹配路由" class="headerlink" title="预定义正则匹配路由"></a>预定义正则匹配路由</h5><h6 id="可以直接讲正则-regex-写死-然后直接用就行了"><a href="#可以直接讲正则-regex-写死-然后直接用就行了" class="headerlink" title="可以直接讲正则(regex)写死,然后直接用就行了"></a>可以直接讲正则(regex)写死,然后直接用就行了</h6><p>一般应用场景是 固定类型的正则（验证手机号的合法等等）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 声明一个固定转换器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mobileter</span><span class="params">(BaseConverter)</span>:</span></span><br><span class="line">    regex = <span class="string">"1[3-9]\d&#123;9&#125;"</span></span><br><span class="line">    </span><br><span class="line">  <span class="comment">## 将上面的转化器注册到转化器字典中</span></span><br><span class="line">app.url_map.converters[<span class="string">'mobile'</span>]  = Mobileter</span><br><span class="line"></span><br><span class="line"><span class="comment">##使用自定义的转换器，</span></span><br><span class="line"><span class="meta">@app.route("/user/&lt;mobile:mobile&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(mobile)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"用户手机号%s"</span> % mobile</span><br></pre></td></tr></table></figure>

<h4 id="系统自带转换器"><a href="#系统自带转换器" class="headerlink" title="系统自带转换器"></a>系统自带转换器</h4><hr>
<p>werkzeug.routing.py</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">DEFAULT_CONVERTERS = &#123;</span><br><span class="line">    <span class="string">"default"</span>: UnicodeConverter,</span><br><span class="line">    <span class="string">"string"</span>: UnicodeConverter,</span><br><span class="line">    <span class="string">"any"</span>: AnyConverter,</span><br><span class="line">    <span class="string">"path"</span>: PathConverter,</span><br><span class="line">    <span class="string">"int"</span>: IntegerConverter,</span><br><span class="line">    <span class="string">"float"</span>: FloatConverter,</span><br><span class="line">    <span class="string">"uuid"</span>: UUIDConverter,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="http的请求与响应"><a href="#http的请求与响应" class="headerlink" title="http的请求与响应"></a>http的请求与响应</h2><p>在flask中导入 request 模块，用request模块去获取客户端提交的数据</p>
<p>常用的属性如下：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>说明</th>
<th>类型</th>
</tr>
</thead>
<tbody><tr>
<td>data</td>
<td>记录请求的数据，并转换为字符串</td>
<td>*</td>
</tr>
<tr>
<td>form</td>
<td>记录请求中的表单数据</td>
<td>MultiDict</td>
</tr>
<tr>
<td>args</td>
<td>记录请求中的查询参数</td>
<td>MultiDict</td>
</tr>
<tr>
<td>cookies</td>
<td>记录请求中的cookie信息</td>
<td>Dict</td>
</tr>
<tr>
<td>headers</td>
<td>记录请求中的请求头</td>
<td>EnvironHeaders</td>
</tr>
<tr>
<td>method</td>
<td>记录请求使用的HTTP方法</td>
<td>GET/POST</td>
</tr>
<tr>
<td>url</td>
<td>记录请求的URL地址</td>
<td>string</td>
</tr>
<tr>
<td>files</td>
<td>记录请求上传的文件</td>
<td>*</td>
</tr>
<tr>
<td>json</td>
<td>记录请求的json数据</td>
<td>json</td>
</tr>
</tbody></table>
<h4 id="响应"><a href="#响应" class="headerlink" title="响应"></a>响应</h4><hr>
<p>Flask 默认支持两种响应方式</p>
<ul>
<li>数据响应： 默认响应html，也可以返回json</li>
<li>页面响应：重定向  url_for</li>
</ul>
<p>响应的时候，flask也支持自定义响应状态码</p>
<p><strong>响应html文本</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 路由</span></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># [默认支持]响应html文本</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;img src='https://palletsprojects.com/logo-large.png'&gt;"</span></span><br></pre></td></tr></table></figure>

<p><strong>返回JSON数据</strong></p>
<p>在flask中可以直接使用jsonify 生成一个json的响应</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 也可以响应json格式代码</span></span><br><span class="line">    data = [</span><br><span class="line">        &#123;<span class="string">"id"</span>:<span class="number">1</span>,<span class="string">"username"</span>:<span class="string">"liulaoshi"</span>,<span class="string">"age"</span>:<span class="number">18</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"id"</span>:<span class="number">2</span>,<span class="string">"username"</span>:<span class="string">"liulaoshi"</span>,<span class="string">"age"</span>:<span class="number">17</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"id"</span>:<span class="number">3</span>,<span class="string">"username"</span>:<span class="string">"liulaoshi"</span>,<span class="string">"age"</span>:<span class="number">16</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"id"</span>:<span class="number">4</span>,<span class="string">"username"</span>:<span class="string">"liulaoshi"</span>,<span class="string">"age"</span>:<span class="number">15</span>&#125;,</span><br><span class="line">    ]</span><br><span class="line">    <span class="keyword">return</span> jsonify(data)</span><br></pre></td></tr></table></figure>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><hr>
<p>重定向到站外页面</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,jsonify,redirect</span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 页面跳转响应</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">'http://www.baidu.com'</span>)</span><br></pre></td></tr></table></figure>

<p>重定向到自己写的视图函数</p>
<p>也可以直接填写自己的url路径</p>
<p>也可以使用url_for 生成指定视图函数所对应url</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route("/user")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 页面跳转响应</span></span><br><span class="line">    userid = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'userid %s'</span> % userid</span><br><span class="line"></span><br><span class="line"><span class="comment">## 路由</span></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 页面跳转响应</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'user'</span>))  <span class="comment">## 这里的user 是上面的user函数</span></span><br></pre></td></tr></table></figure>

<h4 id="url-for"><a href="#url-for" class="headerlink" title="url_for"></a>url_for</h4><hr>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#使用url_for可以实现视图方法之间的内部跳转</span></span><br><span class="line"><span class="comment"># url_for("视图方法名")</span></span><br><span class="line"><span class="meta">@app.route("/login")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> redirect( url_for(<span class="string">"index"</span>) )</span><br></pre></td></tr></table></figure>

<h4 id="重定向到带有参数的视图函数"><a href="#重定向到带有参数的视图函数" class="headerlink" title="重定向到带有参数的视图函数"></a>重定向到带有参数的视图函数</h4><hr>
<p>在url_for 函数中传入参数</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 路由传递参数</span></span><br><span class="line"><span class="meta">@app.route("/user/&lt;userid&gt;")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">(userid)</span>:</span></span><br><span class="line">    <span class="comment"># 页面跳转响应</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'userid %s'</span> % userid</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重定向</span></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 使用url_for 生成指定视图函数所对应的url</span></span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">'user'</span>,userid=<span class="number">100</span>))</span><br></pre></td></tr></table></figure>

<h4 id="自定义状态码"><a href="#自定义状态码" class="headerlink" title="自定义状态码"></a>自定义状态码</h4><hr>
<p>在flask 中，可以很方便的返回自定义状态码，以实现不符合http协议的状态吗，例如：status code :666</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route('/demo4')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">demo4</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'状态码为 666'</span>, <span class="number">400</span></span><br></pre></td></tr></table></figure>

<h2 id="会话控制"><a href="#会话控制" class="headerlink" title="会话控制"></a>会话控制</h2><p>实现状态保持的两种方式：</p>
<ul>
<li>在客户端存储信息使用Cookie本地存储，token[jwt.,auth]</li>
<li>在服务器端存储信息使用Session，redis</li>
</ul>
<h4 id="设置Cookie"><a href="#设置Cookie" class="headerlink" title="设置Cookie"></a>设置Cookie</h4><p>flask框架提供了一个make_responce 函数来快速创建响应对象</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 首先实例化一个make_responce对象，传入的参数是响应对象的主体</span></span><br><span class="line"><span class="comment">## 去给这个响应对象设置cookies， 传入key，value，过期时间</span></span><br><span class="line"><span class="comment">## 最后将这个对象retrun ge给客户端</span></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    resp = make_response(<span class="string">'this is set cookie'</span>)</span><br><span class="line">    resp.set_cookie(<span class="string">'usename'</span>,<span class="string">'xiaoming'</span>,max_age=<span class="number">3600</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>

<h4 id="获取Cookie"><a href="#获取Cookie" class="headerlink" title="获取Cookie"></a>获取Cookie</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.route("/get")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    resp = request.cookies.get(<span class="string">'username'</span>)</span><br><span class="line">    <span class="keyword">return</span> resp</span><br></pre></td></tr></table></figure>

<h3 id="Session"><a href="#Session" class="headerlink" title="Session"></a>Session</h3><hr>
<p>在服务器段进行状态保存的方案就是Session</p>
<p>注意：Session依赖于Cookie，而且flask中使用session，需要配置SECRET_KEY 选项，否则报错</p>
<h4 id="设置session"><a href="#设置session" class="headerlink" title="设置session"></a>设置session</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 首先设置SECRET_KEY </span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span><span class="params">(object)</span>:</span></span><br><span class="line">    SECRET_KEY = <span class="string">'1231fddfds213'</span></span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"></span><br><span class="line"><span class="comment">## 然后从flask中导入session模块</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> session</span><br><span class="line"></span><br><span class="line"><span class="comment">## 定义视图函数</span></span><br><span class="line"><span class="meta">@app.route("/set")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set</span><span class="params">()</span>:</span></span><br><span class="line">    session[<span class="string">'uname'</span>] = <span class="string">'xiaoming'</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br></pre></td></tr></table></figure>

<h4 id="获取session"><a href="#获取session" class="headerlink" title="获取session"></a>获取session</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 直接使用session.get(ket)这个函数取得存储的session</span></span><br><span class="line"><span class="meta">@app.route("/get")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get</span><span class="params">()</span>:</span></span><br><span class="line">    resp = session.get(<span class="string">'uname'</span>)</span><br><span class="line">    <span class="keyword">return</span> res</span><br></pre></td></tr></table></figure>

<h2 id="上下文"><a href="#上下文" class="headerlink" title="上下文"></a>上下文</h2><h4 id="flask中上下文的分为两种"><a href="#flask中上下文的分为两种" class="headerlink" title="flask中上下文的分为两种"></a>flask中上下文的分为两种</h4><p>上下文：即语境，语意，在程序中可以理解为在代码执行到某一时刻时，根据之前代码所做的操作以及下文即将要执行的逻辑，可以决定在当前时刻下可以使用到的变量，或者可以完成的事情。</p>
<p>Flask中有两种上下文，请求上下文(request context)和应用上下文(application context)。</p>
<p>Flask中上下文对象：相当于一个容器，保存了 Flask 程序运行过程中的一些信息[变量、函数、类与对象等信息]</p>
<ol>
<li><em>application</em> 指的就是当你调用<code>app = Flask(__name__)</code>创建的这个对象<code>app</code>；</li>
<li><em>request</em> 指的是每次<code>http</code>请求发生时，<code>WSGI server</code>(比如gunicorn)调用<code>Flask.__call__()</code>之后，在<code>Flask</code>对象内部创建的<code>Request</code>对象；</li>
<li><em>application</em> 表示用于响应WSGI请求的应用本身，<em>request</em> 表示每次http请求；</li>
<li><em>application<em>的生命周期大于</em>request<em>，一个</em>application<em>存活期间，可能发生多次http请求，所以，也就会有多个</em>request</em></li>
</ol>
<ul>
<li><p>请求上下文对象</p>
<ul>
<li><p>request</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Flask的请求上下文，包含请求变量如:method、args、form、values、endpoint、headers、remote_addr都是比较常用的。</span><br><span class="line">    </span><br><span class="line">  例如 ：　request.args.get (<span class="string">'user'</span> )   获取get请求参数</span><br></pre></td></tr></table></figure>
</li>
<li><p>session</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Flask的请求上下文，用于存放用户的会话信息。</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<ul>
<li><p>应用上下文对象</p>
<ul>
<li><p>current_app</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Flask的应用上下文，返回当前app的方法和属性，可以勉强理解为类全局变量。</span><br></pre></td></tr></table></figure>
</li>
<li><p>g</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">    作为Flask 程序全局中的一个临时变量</span><br><span class="line">    不同的请求有不同的全局变量g</span><br><span class="line">简单来说这个临时变量的生命周期就是一次请求，。</span><br><span class="line">    只在当前请求中共享变量</span><br></pre></td></tr></table></figure>




</li>
</ul>
</li>
</ul>
<h3 id="两者区别："><a href="#两者区别：" class="headerlink" title="两者区别："></a>两者区别：</h3><hr>
<ul>
<li>请求上下文：保存了客户端和服务器交互的数据</li>
<li>应用上下文：flask 应用程序运行过程中，保存的一些配置信息，比如程序名、数据库连接、应用信息等</li>
</ul>
<h2 id="请求钩子"><a href="#请求钩子" class="headerlink" title="请求钩子"></a>请求钩子</h2><h4 id="flask的四种请求钩子（又称网络拦截器）"><a href="#flask的四种请求钩子（又称网络拦截器）" class="headerlink" title="flask的四种请求钩子（又称网络拦截器）"></a>flask的四种请求钩子（又称网络拦截器）</h4><ul>
<li>before_first_request<ul>
<li>在处理第一个请求之前执行（项目初始化的钩子）</li>
<li>应用场景：开启数据库链接，等等</li>
</ul>
</li>
<li>before_request<ul>
<li>在每次请求前执行</li>
<li>如果在某修饰函数中返回了一个响应，视图函数将不再被调用</li>
<li>应用场景：　做jwt 或者auth 权限认证，　如果不通过则返回一个响应对象，这样下面的视图函数就不走了。</li>
</ul>
</li>
<li>after_request<ul>
<li>必须接收一个response的参数，是请求执行的视图函数的返回对象</li>
<li>如果没有抛出错误，在每次请求后执行</li>
<li>接受一个参数： 将视图函数的作出的响应对象传入</li>
<li>在此函数中可以对响对象中的值在返回之前做最后一部修改处理</li>
<li>需要将参数中的响应子啊此参数中进行返回</li>
</ul>
</li>
<li>teardown_request<ul>
<li>严格来说，没有固定请求的位置，只有请求上下文被pop出栈的时候就会出发这个，所以即使之前有跑出错误都会执行，通俗一点就是当</li>
<li>在视图内部报错之后执行</li>
<li>接受一个参数： 错误信息，如果有相关错误抛出</li>
<li>需要设置flask的配置DEBUG=False，teardown_request才会接受到异常对象。</li>
</ul>
</li>
</ul>
<p>可以通过request 方法，进行对请求的url及参数或者文件的提取，再进行逻辑判断，从而决定钩子的流程控制及返回值</p>
<p><strong>after_request</strong></p>
<h6 id="必须接收一个response的参数，是请求执行的视图函数的返回对象"><a href="#必须接收一个response的参数，是请求执行的视图函数的返回对象" class="headerlink" title="必须接收一个response的参数，是请求执行的视图函数的返回对象"></a>必须接收一个response的参数，是请求执行的视图函数的返回对象</h6><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 请求对应的视图函数执行后＝要执行的钩子函数，在返回客户端之前</span></span><br><span class="line"><span class="meta">@app.after_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">after_request</span><span class="params">(responce)</span>:</span></span><br><span class="line">    print(<span class="string">'－－－请求执行后需要执行的钩子函数－－－'</span>)</span><br><span class="line">    print(<span class="string">'－－－主要作用就是对视图函数返回的值到客户端之前进行再此的修饰－－－'</span>)</span><br><span class="line">    print(responce.data)</span><br><span class="line">    <span class="keyword">return</span> responce</span><br><span class="line"></span><br><span class="line"><span class="comment">#路由</span></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">user</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 页面跳转响应</span></span><br><span class="line">    print(<span class="string">'----视图函数-----'</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'ok'</span></span><br></pre></td></tr></table></figure>

<p><strong>teardown_request</strong></p>
<p>当视图中报错时候就会触发teardown请求钩子，必须要一个参数接收异常信息</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 在视图内，抛出异常就会执行</span></span><br><span class="line"><span class="meta">@app.teardown_request</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">teardown_request</span><span class="params">(exc)</span>:</span></span><br><span class="line">    print(<span class="string">'exc %s'</span> % exsc )</span><br></pre></td></tr></table></figure>

<h2 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h2><p>主动抛出HTTP异常</p>
<hr>
<ul>
<li>abort方法<ul>
<li>抛出一个给定状态码的HTTPException或者指定响应，列如想要用一个页面未找到异常来终止请求，你可以调用abort(404)</li>
</ul>
</li>
<li>参数：<ul>
<li>code -HTTP 的错误状态码</li>
</ul>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># abort(404)</span></span><br><span class="line">abort(<span class="number">500</span>)</span><br></pre></td></tr></table></figure>

<blockquote>
<p>抛出状态码的话，只能抛出HTTP协议的错误状态吗</p>
</blockquote>
<h2 id="捕获错误"><a href="#捕获错误" class="headerlink" title="捕获错误"></a>捕获错误</h2><ul>
<li><p>errorhandler 装饰器</p>
</li>
<li><p>注册一个错误处理程序，当检测到程序抛出指定错误状态吗的时候，就会调用该装饰器所装饰的方法</p>
</li>
<li><p>参数</p>
<ul>
<li>code_or_exception-HTTP 的错误状态吗或指定异常</li>
</ul>
</li>
<li><p>例如，统一处理“页面找不到”，状态码为500 ，给用户友好的提示</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_404</span><span class="params">(error)</span>:</span></span><br><span class="line">    print(error)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;img src=https://raw.githubusercontent.com/chenluzhong150394/img/master/1.png &gt;"</span></span><br></pre></td></tr></table></figure>

<p><img src="https://raw.githubusercontent.com/chenluzhong150394/img/master/%E5%AE%9E%E4%BE%8B1.png" alt="实例"></p>
</li>
</ul>
<ul>
<li><p>捕获指定异常类型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">@app.errorhandler(ZeroDivisionError)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">zero_division_error</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">'除数不能为0'</span></span><br></pre></td></tr></table></figure>

<p>实例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> settings.dev <span class="keyword">import</span> Config</span><br><span class="line"><span class="comment"># 创建flask应用</span></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="string">"""加载配置"""</span></span><br><span class="line">app.config.from_object(Config)</span><br><span class="line"></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="string">flask中内置了app.errorhander提供给我们捕获异常，实现一些在业务发生错误时的自定义处理。</span></span><br><span class="line"><span class="string">1. 通过http状态码捕获异常信息</span></span><br><span class="line"><span class="string">2. 通过异常类进行异常捕获</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"></span><br><span class="line"><span class="string">"""1. 捕获http异常[在装饰器中写上要捕获的异常状态码也可以是异常类]"""</span></span><br><span class="line"><span class="meta">@app.errorhandler(404)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_404</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"&lt;h1&gt;您访问的页面失联了！&lt;/h1&gt;"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">"""2. 捕获系统异常或者自定义异常"""</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">APIError</span><span class="params">(Exception)</span>:</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route("/")</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">raise</span> APIError(<span class="string">"api接口调用参数有误！"</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"个人中心，视图执行了！！"</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.errorhandler(APIError)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">error_apierror</span><span class="params">(e)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"错误: %s"</span> % e</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.run(host=<span class="string">"localhost"</span>,port=<span class="number">8080</span>)</span><br></pre></td></tr></table></figure>













</li>
</ul>
<h2 id="Flask-Script扩展"><a href="#Flask-Script扩展" class="headerlink" title="Flask-Script扩展"></a>Flask-Script扩展</h2><h4 id="安装命令："><a href="#安装命令：" class="headerlink" title="安装命令："></a>安装命令：</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">pip install flask-script</span><br></pre></td></tr></table></figure>

<p>集成 Flask-Script到flask应用中，创建一个主应用程序，一般我们叫<code>manage.py</code></p>
<h4 id="配置脚手架使其能通过终端运行项目"><a href="#配置脚手架使其能通过终端运行项目" class="headerlink" title="配置脚手架使其能通过终端运行项目"></a>配置脚手架使其能通过终端运行项目</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 第一步 ，导包</span></span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager</span><br><span class="line"></span><br><span class="line"><span class="comment">### 第二步  初始化manger对象，传入app应用进行绑定</span></span><br><span class="line">manage = Manager(app)</span><br><span class="line"></span><br><span class="line"><span class="comment">### 第三步，就可以使用manage启动运行项目</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    manage.run()</span><br><span class="line"></span><br><span class="line"><span class="comment">### 使用终端运行, (main.py  为项目文件)</span></span><br><span class="line">&gt;&gt; python main.py runserver </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 通过  -？  来获取执行函数的参数</span></span><br><span class="line">&gt;&gt; python main.py runserver -? </span><br><span class="line"></span><br><span class="line"><span class="comment"># 端口和域名不写，默认为127.0.0.1:5000</span></span><br><span class="line">python manage.py runserver</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过-h设置启动域名，-p设置启动端口</span></span><br><span class="line">python manage.py runserver -h127<span class="number">.0</span><span class="number">.0</span><span class="number">.1</span> -p8080</span><br></pre></td></tr></table></figure>

<h4 id="Flask-Script-可以直接为当前脚本添加新的命令"><a href="#Flask-Script-可以直接为当前脚本添加新的命令" class="headerlink" title="Flask-Script 可以直接为当前脚本添加新的命令"></a>Flask-Script 可以直接为当前脚本添加新的命令</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#第一步，首先引入Command基类</span></span><br><span class="line"><span class="keyword">from</span> flask_script <span class="keyword">import</span> Manager,Command</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二步 , 自定义命令类，继承Command基类，并将要执行的逻辑放到run方法里面</span></span><br><span class="line"><span class="class"><span class="keyword">class</span>  <span class="title">Hello</span><span class="params">(Command)</span>:</span></span><br><span class="line">    <span class="string">"""run方法里面存放着要执行的逻辑"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'123'</span>)</span><br><span class="line"><span class="comment"># 第三步，注册自定义命令类并加上别名</span></span><br><span class="line"></span><br><span class="line">manage.add_command(<span class="string">'hello'</span>, Hello() )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>注意，如果有自定义的其他参数传入，需要使用init构造函数导入</p>
</blockquote>
<h1 id="Jinja2模板引擎"><a href="#Jinja2模板引擎" class="headerlink" title="Jinja2模板引擎"></a>Jinja2模板引擎</h1><p>flask中内置的模板语言，设计思想来源与django中的模板引擎,flask 内置的render_template 函数封装了这个模板引擎</p>
<p>要想在flask中使用模板引擎，需要做以下设置</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#首先在创建flask 应用的时候加上  template_folder 参数，指定模板的根目录</span></span><br><span class="line">app = Flask(__name__,template_folder = <span class="string">'templates'</span>)</span><br><span class="line"><span class="comment">## 默认是在项目的根目录下的</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 在视图函数中设置渲染模板设置模板数据</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template </span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inde</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,title=<span class="string">'我的flask 项目'</span>)</span><br></pre></td></tr></table></figure>

<p>在视图函数中往janja2 模板传入变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">### 视图函数</span></span><br><span class="line"><span class="meta">@app.route('/index')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inde</span><span class="params">()</span>:</span></span><br><span class="line">    sts = <span class="string">'这也是一个变量'</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">'index.html'</span>,title=<span class="string">'我的flask 项目'</span>,sts)    </span><br><span class="line"><span class="comment">## title就是一个变量,  sts 也是 ，这是两种方式，前者是传入已经定义好的变量名，后者是直接变量名加上赋值操作一起做， </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 在模板中使用变量</span></span><br><span class="line"><span class="comment">## 使用两个花括号来表示变量名  ，，  这种语法叫做** 变量代码块</span></span><br><span class="line">&#123;&#123;&#125;&#125;      &#123;&#123; title &#125;&#125;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;title&gt;&#123;&#123; title &#125;&#125;&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>Jinja2 模板中的变量代码块可以是任何python类型后者对象，只要它能够被python的<em>\</em>str__魔术方法 或者str() 方法转换成字符串就可以，通俗来说只要能被json的对象都可以。</li>
</ul>
<p>在模板中怎样注释变量</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;<span class="comment"># &#123;&#123; name &#125;&#125; #&#125;</span></span><br></pre></td></tr></table></figure>

<h4 id="jinja2模板内置的变量和函数"><a href="#jinja2模板内置的变量和函数" class="headerlink" title="jinja2模板内置的变量和函数"></a>jinja2模板内置的变量和函数</h4><hr>
<blockquote>
<p>就是说你可以在模板中直接访问flask内置的函数和对象</p>
</blockquote>
<ul>
<li><p>Config</p>
<p><strong>你可以直接在模板中访问flask中的config对象</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123;config.DEBUG&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>request</p>
<p> <strong>注意：  是当前请求的request对象</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h5</span>&gt;</span>&#123;&#123;request.url&#125;&#125;<span class="tag">&lt;/<span class="name">h5</span>&gt;</span></span><br><span class="line">http://127.0.0.1:5000/index</span><br></pre></td></tr></table></figure>
</li>
<li><p>session</p>
<p><strong>flask中的session对象</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">&#123;&#123; session.new&#125;&#125;</span><br><span class="line">False</span><br></pre></td></tr></table></figure>
</li>
<li><p>g 变量</p>
<p><strong>在视图函数中设置的g变量的name属性的值，然后在模板中可以取出</strong></p>
<p><strong>由于g变量的特性，所以它也只能取到本次请求所携带的g变量的值</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;&#123; g.name &#125;&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>url_for()</p>
<p><strong>url_for 会根据传入的路由器函数名，返回改路由对应的URL，在模板中始终使用url_for() 就可以安全的修改路由绑定的URL，则不必担心模板中渲染出错的链接：</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 显示 flask中方法函数对应的路由url地址</span></span><br><span class="line">&#123;&#123;url_for(<span class="string">'home'</span>)&#125;&#125;</span><br><span class="line">&gt;&gt;  /</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">## 当有路由函数需要传入参数时，这是我们也需要传入参数就可以将完整url拼接出来</span></span><br><span class="line">&#123;&#123; url_for(<span class="string">'user'</span>, userid=<span class="number">1</span>)&#125;&#125;</span><br><span class="line">&gt;&gt;   /user/<span class="number">1</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h4><hr>
<p><strong>主要包含两个，（与django中的基本保持一致）</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"> - if /else /endif</span><br><span class="line">- for /endfor</span><br></pre></td></tr></table></figure>

<h4 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h4><hr>
<p>常用的过滤器</p>
<table>
<thead>
<tr>
<th>过滤器名</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>safe</td>
<td>渲染时不转义</td>
</tr>
<tr>
<td>capitalize</td>
<td>把值的首字母转换成大写，其他字母转换成小写</td>
</tr>
<tr>
<td>lower</td>
<td>把值转换成小写形式</td>
</tr>
<tr>
<td>upper</td>
<td>把值转换成大写形式</td>
</tr>
<tr>
<td>title</td>
<td>把值中每个单词的首字母都转换成大写</td>
</tr>
<tr>
<td>trim</td>
<td>把值的首尾空格都去掉</td>
</tr>
<tr>
<td>striptags</td>
<td>渲染前把值中的所有的HTML标签都删掉</td>
</tr>
</tbody></table>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## safe 过滤器  ,因为默认的安全机制会对html代码字符串进行转码。不让其正常进行渲染。</span><br><span class="line"></span><br><span class="line">&#123;&#123; index |  safe &#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="在jinja2-中，-过滤器是可以直接链式调用的"><a href="#在jinja2-中，-过滤器是可以直接链式调用的" class="headerlink" title="在jinja2 中， 过滤器是可以直接链式调用的"></a>在jinja2 中， 过滤器是可以直接链式调用的</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&#123;&#123;<span class="string">"hello world "</span> | reverse | uppper  &#125;&#125;</span><br></pre></td></tr></table></figure>

<h4 id="链式调用"><a href="#链式调用" class="headerlink" title="链式调用"></a>链式调用</h4><p>安装</p>
<h2 id="github-可以当做静态资源仓库，调用的url为"><a href="#github-可以当做静态资源仓库，调用的url为" class="headerlink" title="github 可以当做静态资源仓库，调用的url为"></a>github 可以当做静态资源仓库，调用的url为</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">https://raw.githubusercontent.com/chenluzhong150394/img/master/<span class="number">1.</span>png</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 这是仓库的url，（可以查看内容的）</span></span><br><span class="line">https://raw.githubusercontent.com/chenluzhong150394</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    https://raw.githubusercontent.com/chenluzhong150394/img/master/<span class="number">11.</span>png</span><br></pre></td></tr></table></figure>

<p><img src="https://u8b3.cn/uSOl2" alt></p>
<h3 id="lsof-i-8080-linux-查看端口"><a href="#lsof-i-8080-linux-查看端口" class="headerlink" title="lsof -i:8080 linux 查看端口"></a>lsof -i:8080 linux 查看端口</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>flask框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Git的安装及常用操作</title>
    <url>/git.html</url>
    <content><![CDATA[<h1 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h1><h2 id="Linux下安装"><a href="#Linux下安装" class="headerlink" title="Linux下安装"></a>Linux下安装</h2><p>yum安装</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">yum <span class="literal">-y</span> install git</span><br></pre></td></tr></table></figure>

<p><code>test</code></p>
<h2 id="windows下安装"><a href="#windows下安装" class="headerlink" title="windows下安装"></a>windows下安装</h2><p>官网地址：</p>
<p><a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553220095452.png" alt="1553220095452"></p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553208779674.png" alt="1553208779674"></p>
<p>下载到本地磁盘</p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553208790623.png" alt="1553208790623"></p>
<p>安装</p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553208801316.png" alt="1553208801316"></p>
<p>一路【next】就可以了</p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553220218170.png" alt="1553220218170"></p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553220208875.png" alt="1553220208875"></p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553220240618.png" alt="1553220240618"></p>
<p>注意：<strong>openssl  一定选它</strong></p>
<p>安装完成后，右击菜单栏，有如下菜单，表示安装完成</p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553220425466.png" alt="1553220425466"></p>
<p>进入git bash选项<br><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553220553963.png" alt="1553220553963"></p>
<p>Git工作区、暂存区和版本库</p>
<p><img src="G:/%E8%A7%86%E9%A2%91/python%E7%AC%AC%E5%9B%9B%E6%9C%9F%E7%9A%84%E8%A7%86%E9%A2%91/day069/assets/1553208888303.png" alt="1553208888303"></p>
<h1 id="git的使用"><a href="#git的使用" class="headerlink" title="git的使用"></a>git的使用</h1><h2 id="本地使用git管理代码"><a href="#本地使用git管理代码" class="headerlink" title="本地使用git管理代码"></a>本地使用git管理代码</h2><h3 id="git项目仓库的本地搭建"><a href="#git项目仓库的本地搭建" class="headerlink" title="git项目仓库的本地搭建"></a>git项目仓库的本地搭建</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cd进入到自己希望存储代码的目录路径，并创建本地仓库.git</span><br><span class="line">新创建的本地仓库.git是个空仓库</span><br><span class="line"></span><br><span class="line">  cd 目录路径</span><br><span class="line">  git init gitdemo  # 如果没有声明目录,则自动把当前目录作为git仓库</span><br></pre></td></tr></table></figure>

<p>checkout 切换分支</p>
<p>pull         拉取远程git代码</p>
<p>branch  -a  查看所有分支</p>
<h2 id="管理远程git仓库"><a href="#管理远程git仓库" class="headerlink" title="管理远程git仓库"></a>管理远程git仓库</h2><h3 id="删除远端git项目中的指定文件和目录"><a href="#删除远端git项目中的指定文件和目录" class="headerlink" title="删除远端git项目中的指定文件和目录"></a>删除远端git项目中的指定文件和目录</h3><p> <strong>首先拉取远程git仓库</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##如果本地仓库存在，则只需要pull 将远端git仓库与本地git仓库一直</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">##如果本地仓库不存在，则需要克隆clone</span></span><br><span class="line">git clone https://gitee.com/chenluzhong/blog.git</span><br></pre></td></tr></table></figure>

<p><strong>使用git删除本地文件或目录</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">## 删除本地文件</span></span><br><span class="line">git rm &lt;file_name&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">## 删除本地目录</span></span><br><span class="line"><span class="comment">### -r 参数是递归删除的意思，如果目录是空的，就不用加这个参数也可以    </span></span><br><span class="line">git rm -r &lt;dir_name&gt;</span><br></pre></td></tr></table></figure>

<p><strong>提交代码到本地仓库</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git commit -m <span class="string">'删除某文件后的版本'</span></span><br></pre></td></tr></table></figure>

<p><strong>将本地仓库推送到远端</strong></p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">git push &lt;base_url&gt; -u</span><br></pre></td></tr></table></figure>

<h2 id="本地仓库推送到码云"><a href="#本地仓库推送到码云" class="headerlink" title="本地仓库推送到码云"></a>本地仓库推送到码云</h2><p>首先码云仓库的地址是:  <strong><a href="https://gitee.com/chenluzhong/lufeiapi.git" target="_blank" rel="noopener">https://gitee.com/chenluzhong/lufeiapi.git</a></strong></p>
<p>设置全局配置(用户名和邮箱)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git config --global user.name &apos;chenluzhong&apos;</span><br><span class="line">git config --global user.email &apos;18438128833@163.com&apos;</span><br></pre></td></tr></table></figure>

<p>创建git仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure>

<p>提交本地的文件到暂存区</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure>

<p>将暂存区的内容提交到本地仓库中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git commit -m &apos;这是第一个版本&apos;</span><br></pre></td></tr></table></figure>

<p>然后关联远程仓库地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git remote add origin https://gitee.com/chenluzhong/lufeiapi.git</span><br></pre></td></tr></table></figure>

<p>将本地的主分支与远程的分支进行关联</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/master master</span><br><span class="line">git pull orgin master</span><br></pre></td></tr></table></figure>

<p>将本地仓库推送到远端仓库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## -u 参数指定唯一主机,     master代表将推送到目标仓库的master主分支</span><br><span class="line">$ git push &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;</span><br><span class="line"></span><br><span class="line">git push -u origin master:master</span><br></pre></td></tr></table></figure>

<h2 id="branch分支操作"><a href="#branch分支操作" class="headerlink" title="branch分支操作"></a>branch分支操作</h2><p>查看所有分支</p>
<ul>
<li><p>查看本地分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch</span><br></pre></td></tr></table></figure>
</li>
<li><p>查看远程分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -a</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>创建分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch dev 	##新建一个dev的本地分支</span><br></pre></td></tr></table></figure>

<p>切换分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git checkout dev 	## 切换到dev这个分支</span><br></pre></td></tr></table></figure>

<p>删除分支</p>
<ul>
<li><p>删除本地分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git branch -d dev	## 删除本地分支</span><br></pre></td></tr></table></figure>
</li>
<li><p>删除远程分支</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git push origin --delete dev	## 删除远程仓库中dev分支</span><br></pre></td></tr></table></figure>

</li>
</ul>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
      <tags>
        <tag>git操作</tag>
      </tags>
  </entry>
  <entry>
    <title>Shadowsocet配置多端口</title>
    <url>/shadowscoket%20%E9%85%8D%E7%BD%AE%E5%A4%9A%E7%AB%AF%E5%8F%A3%20(%E9%9C%80%E8%A6%81%E9%85%8D%E7%BD%AE%E9%98%B2%E7%81%AB%E5%A2%99).html</url>
    <content><![CDATA[<h2 id="shadowscoket-配置多端口-需要配置防火墙"><a href="#shadowscoket-配置多端口-需要配置防火墙" class="headerlink" title="shadowscoket 配置多端口 (需要配置防火墙)"></a>shadowscoket 配置多端口 (需要配置防火墙)</h2><p>先将要设置的端口在firewall防火墙放行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --add-port=52300/tcp --permanent  </span><br><span class="line">firewall-cmd --zone=public --add-port=52300/udp --permanent</span><br></pre></td></tr></table></figure>

<p>查看firewall 开放的所有端口</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">firewall-cmd --zone=public --list-ports</span><br></pre></td></tr></table></figure>

<p>然后去将原来的shadowscoket配置文件进行备份</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">cp  /etc/shadowsocks.json  /etc/shadowsocks.json.bak</span><br></pre></td></tr></table></figure>

<p>然后打开配置文件替换成以下内容</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vim   /etc/shadowsocks.json</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;server&quot;:&quot;0.0.0.0&quot;,</span><br><span class="line">&quot;local_address&quot;:&quot;127.0.0.1&quot;,</span><br><span class="line">&quot;local_port&quot;:1080,</span><br><span class="line">&quot;port_password&quot;:&#123;</span><br><span class="line">&quot;52300&quot;:&quot;chenshuo003&quot;,</span><br><span class="line">&quot;52500&quot;:&quot;chenshuo003&quot;</span><br><span class="line">&#125;,</span><br><span class="line">&quot;obfs&quot;:&quot;plain&quot;,</span><br><span class="line">&quot;obfs_param&quot;:&quot;&quot;,</span><br><span class="line">&quot;timeout&quot;:300,</span><br><span class="line">&quot;method&quot;:&quot;aes-256-cfb&quot;,</span><br><span class="line">&quot;fast_open&quot;: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后重启shadowsocket服务并查看状态</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"># 重启服务</span><br><span class="line">/etc/init.d/shadowsocks restart</span><br><span class="line">## 查看服务状态</span><br><span class="line">/etc/init.d/shadowsocks status</span><br></pre></td></tr></table></figure>

<p>重启锐速</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">## 重启锐速</span><br><span class="line">service serverSpeeder restart</span><br><span class="line"></span><br><span class="line">##查看锐速状态</span><br><span class="line">service serverSpeeder status</span><br></pre></td></tr></table></figure>

<h4 id="查看当前端口有多少IP链接-脚本有后台-需要手动禁止ip–hosts-deny"><a href="#查看当前端口有多少IP链接-脚本有后台-需要手动禁止ip–hosts-deny" class="headerlink" title="查看当前端口有多少IP链接(脚本有后台,需要手动禁止ip–hosts.deny)"></a>查看当前端口有多少IP链接(脚本有后台,需要手动禁止ip–hosts.deny)</h4><hr>
<p>使用netstat 命令</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">netstat -anp |  grep 52300</span><br></pre></td></tr></table></figure>

<p>找到链接的ip,只要不是自己的,全部禁了</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 打开hosts.deny文件</span><br><span class="line">vim /etc/hosts.deny </span><br><span class="line">### 将想要禁止的ip添加上去</span><br><span class="line">125.23.223.2</span><br></pre></td></tr></table></figure>

<p>然后重启网卡服务,使hosts.deny文件生效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">systemctl restart network</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Shadowsocet</tag>
      </tags>
  </entry>
  <entry>
    <title>centos安装python3时候的坑</title>
    <url>/p.html</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="公司机密，谅解谅解" />
    <label for="pass">公司机密，谅解谅解</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">
U2FsdGVkX1+z4FlhZu+n8Upwnt3cPXQrTiKQErng3g6YMsUuepuSyO8DrZheZLi3P02a0VceWA4LkzdWJovpUtgLF1mFn5CCukUM001DRJHwuZWiHHEGjYU3da4p0yCBYCO2QE1xKgz9onJgia7oXfnkawvHRbwdp1wEkVXykOiDxmg/86CW9CMO9w2VFZ9w+Ohv5r4zMBrxhO9kXskQzzNtY+ZypYyRk8UAuqJmEmcg5ErsJZIvJoF+fNddEdA7PS/hgTCd+xzX4/WzuN4WUWKCPPl0whcV6ntDatN3FJ37rUFXIZJKtuOcai2cIzHEwnTYo9jGh7k8AXxJmhLqerjoo6LkQDHYigBUAv+9zSMtt1P6taLS/d447xUdNxzaQikI5Hte2qqVY5t+XMchsjOMVqZUmjGZOckVohWAwKnvtae+T8v9wd4VB6usnmXl2R7QrlQjBXXiUmS6h4nYkIYz91mF4uayWOeWDzyfo78X/hvq9/otsKmUA867ANpQbRP4GLU/MzNOizEV8Bygd1JnDYY7v2rAmufID9s56MdUA+N2Kf9i71S+54GG57P8egvhcoYM7MKu5VoUqjVqyzFXtsywB8Im5HlAbu+bUuWkWOHdpdAQ8/vm08pLcRcddFqAv0r+ejg2+IF/tTPbvT32YKdHyPJlLUM1GfeydmBjW0TmZuT3iabQ26EtjR2jRNKABhuqaA+d9J1k3ALlbYG1mwNkJqxmzEXqGZ4xI4rWl4pi6a3QKmzcj95eGwthsNfNKnPDy8ea8rv04zA7uslV3n848qQ2LUKkKpXfRgoepwgtDrio2ew195r0S+kf+W60hs7SZHVBvCtMC1Jk/Pv0Q1g5PKDKlgofMESBMK4ZWEd10wxMvjmChzoJ14N4wxdHjMOo4PG6WVQTWylQZlPZnqxBDCqMb4hEMD3nCY1icSHmjUM0h+bsQHxMKMpNB8P+Lnxzkd+/0jhXsf9xqz3QKbbllvZ2oiuJDRhjoYcjzi98ih9UpDHbUIvna5MlrX4YU/OPdbg7Z7Rhp+/Qb+lDk7XwSbrtTPxdJKpMwy/naUQAhS4cbegCjTcv3L1G/JlTmai8/wULjLwh+nkf0WrBS/zED2vbZiObml1rTCZIoS0gxj4Vp5eEVh4wpcqqJ+Sx6GdMet4jmKDlUgmm986MhnjWDCS1W5AIwWsqFzwAj2Eg09WdbgFs1jcxDmyJxuxpqrIuBCo+raoEk97Vkj98wTfjDWkMJ5Yf5PezXJgB1IApyA+dSDO4WulX/Wklt0W09E1ngywUkH6GvyY4ki/8t4ZUG/4N2cDWOLBRTVPNLz+pnETiO5XuLKURVr4XC85scgd2Fr5tX+5hBxcSgoqrvqVlCkVBY0GRv1lE655yYkFtgSfTH5fmV/cpq4tK8ge3lO+94wbSAMt1THW2KaiF5XXD57W7CEvBlDXTEoHoEYJ+OWY2zb778F5ASomlb7n7wllV/8IHRXUKCU3ZuEdTZ0Cx1dw8KbFIS1oe8rL/UcLP+zl1RdB9YN5gKGazd8yJcvoM1a9LaozCx+rUTbdKUglFzF+/9WvzHE3XXtjpLfw0SfT572kPvekW89t1Ay1VMk5LCwszeSP86lzMwpfOwAJqmukltcGjQtY56+ZxVX5H3Zlu0avXkRBnMGb89vqWa/QHbdXbGMvIA3GDLhr37GIhoQgXozuCnQLBw7WfJdCudyGymRb12YC+y7PutQHwrmcXGcgMvwfrmhub0PO+hZmYtZfZFOZZuJmj1y3dF6wFfo8I0F0mUSnTc799BootOgH5vm7hWaq5eY0yXqMQ/5Umc4n1jziHM0KZGwTyMQp5/n7j0pRNDqeQ1OK+sLwnJz7pfCXBPSLq6RDhTlxwcNkfTEj0BIG1MqVy3IUWEiOQWiOQMMwOgWPYua+2
</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库常用操作</title>
    <url>/l%E6%95%B0%E6%8D%AE%E5%BA%93.html</url>
    <content><![CDATA[<a id="more"></a>



<h2 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h2><h3 id="数据库的基本操作"><a href="#数据库的基本操作" class="headerlink" title="数据库的基本操作"></a>数据库的基本操作</h3><h4 id="修改root密码"><a href="#修改root密码" class="headerlink" title="修改root密码"></a>修改root密码</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter user root identifiled by password &apos;password&apos;</span><br></pre></td></tr></table></figure>

<p>MySQL修改用户的密码主要有两种方法：ALTER USER 和SET PASSWORD</p>
<h3 id="ALTER-USER"><a href="#ALTER-USER" class="headerlink" title="ALTER USER"></a>ALTER USER</h3><p><strong>基本使用</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER testuser IDENTIFIED BY &apos;123456&apos;;</span><br></pre></td></tr></table></figure>

<p><strong>修改当前登录用户</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER USER() IDENTIFIED BY &apos;123456&apos;;</span><br></pre></td></tr></table></figure>

<p><strong>使密码过期</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER testuser IDENTIFIED BY &apos;123456&apos; PASSWORD EXPIRE;</span><br></pre></td></tr></table></figure>

<p><strong>使密码从不过期</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER testuser IDENTIFIED BY &apos;123456&apos; PASSWORD EXPIRE NEVER;</span><br></pre></td></tr></table></figure>

<p><strong>按默认设置过期时间</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER testuser IDENTIFIED BY &apos;123456&apos; PASSWORD EXPIRE DEFAULT;</span><br></pre></td></tr></table></figure>

<p><strong>指定过期间隔</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ALTER USER testuser IDENTIFIED BY &apos;123456&apos; PASSWORD EXPIRE INTERVAL 90 DAY;</span><br></pre></td></tr></table></figure>

<p><strong>在MySQL文档里，推荐使用ALTER USER修改用户密码</strong></p>
<h3 id="SET-PASSWORD"><a href="#SET-PASSWORD" class="headerlink" title="SET PASSWORD"></a>SET PASSWORD</h3><p>使用SET PASSWORD的password有两种：</p>
<p>使用默认加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR testuser = &apos;123456&apos;</span><br></pre></td></tr></table></figure>

<p>使用PASSWORD()函数加密</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">SET PASSWORD FOR testuser = PASSWORD(&quot;123456&quot;)</span><br></pre></td></tr></table></figure>

<h3 id="增删查改"><a href="#增删查改" class="headerlink" title="增删查改"></a>增删查改</h3><h4 id="增加"><a href="#增加" class="headerlink" title="增加"></a>增加</h4><p>1、增加一个字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">insert</span><br></pre></td></tr></table></figure>

<p>2、增加一条记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、在多表关联的情况下，新增一条数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>1、删除一个字段</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、删除一条记录</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、删除多表中相关联的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h4><p>1、更新一个字段名（在不改变原来数据的情况下）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、更新一条数据中的某个字段的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>3、在多表关联的情况下更新相关联的字段数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><p>1、单表查询（查询满足特定条件的所有数据）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>2、使用左连接查询多表</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="修改"><a href="#修改" class="headerlink" title="修改"></a>修改</h4><p>1、给字段添加注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 创建表的时候加注释</span><br><span class="line">create table test1(name char(32) comment&apos;字段注释&apos;) comment=‘表注释’；</span><br><span class="line"></span><br><span class="line">### 修改某个字段的属性并加上注释</span><br><span class="line">ALTER table table_name MODIFY `column_name` datetime DEFAULT NULL COMMENT &apos;这是字段的注释&apos;</span><br></pre></td></tr></table></figure>

<p>2、给表加注释</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">alter table table_name comment=&apos;这是表的注释&apos;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/hello-world.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>websocket翻译</title>
    <url>/websocket%E7%BF%BB%E8%AF%91.html</url>
    <content><![CDATA[<div id="hbe-security">
  <div class="hbe-input-container">
  <input type="password" class="hbe-form-control" id="pass" placeholder="输入密码并回车之后，即可查看文章。" />
    <label for="pass">输入密码并回车之后，即可查看文章。</label>
    <div class="bottom-line"></div>
  </div>
</div>
<div id="decryptionError" style="display: none;">Incorrect Password!</div>
<div id="noContentError" style="display: none;">No content to display!</div>
<div id="encrypt-blog" style="display:none">

</div>
<script src="/lib/crypto-js.js"></script><script src="/lib/blog-encrypt.js"></script><link href="/css/blog-encrypt.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>websocket</category>
      </categories>
      <tags>
        <tag>websocket</tag>
      </tags>
  </entry>
</search>
